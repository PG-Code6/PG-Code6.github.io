<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>运算符</title>
      <link href="/2023/10/05/JavaScipt-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2023/10/05/JavaScipt-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="1、赋值运算符"><a href="#1、赋值运算符" class="headerlink" title="1、赋值运算符"></a>1、赋值运算符</h2><ul><li>定义：对变量进行赋值的运算符<ul><li>如：”&#x3D;“ 将等号右边的值赋给左边，要求左边必须是一个容器</li><li>其他赋值运算符：+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;</li></ul></li></ul><h2 id="2、一元运算符"><a href="#2、一元运算符" class="headerlink" title="2、一元运算符"></a>2、一元运算符</h2><ul><li>自增运算符：++<ul><li>前置自增：++x</li><li>后置自增：x++</li></ul></li><li>自减运算符：–<ul><li>前置自减：–x</li><li>后置自减：x–</li></ul></li></ul><h2 id="3、比较运算符"><a href="#3、比较运算符" class="headerlink" title="3、比较运算符"></a>3、比较运算符</h2><ul><li>比较运算符：<ul><li><code>&gt;、&lt;、&gt;=、&lt;=、!==</code></li><li>&#x3D;&#x3D;：左右两边的值是否相等</li><li>&#x3D;&#x3D;&#x3D;：左右两边是否类型和值相等</li></ul></li></ul><blockquote><p>注意：</p><ul><li>比较结果为boolean类型，只会得到 true 或 false</li><li>字符串比较，是比较字符串对应的ASCII码<ul><li>比较规则：从左往右依次比较</li></ul></li><li>不同类型之间比较会发生隐式转换<ul><li>最终把数据隐式转换为number类型再比较</li></ul></li></ul></blockquote><h2 id="4、逻辑运算符"><a href="#4、逻辑运算符" class="headerlink" title="4、逻辑运算符"></a>4、逻辑运算符</h2><ul><li>逻辑运算符：<ul><li>逻辑与（&amp;&amp;）：符号两边都为true结果才为true</li><li>逻辑或（||）：符号两边有一个true就为true</li><li>逻辑非（！）：true 变 false，false 变 true</li></ul></li></ul><h2 id="5、运算符的优先级"><a href="#5、运算符的优先级" class="headerlink" title="5、运算符的优先级"></a>5、运算符的优先级</h2><table><thead><tr><th align="center">优先级</th><th align="center">运算符</th><th align="center">顺序</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">小括号</td><td align="center"><code>（）</code></td></tr><tr><td align="center">2</td><td align="center">一元运算符</td><td align="center"><code>++  --  ！</code></td></tr><tr><td align="center">3</td><td align="center">算术运算符</td><td align="center"><code>先*  /  % 后  + -</code></td></tr><tr><td align="center">4</td><td align="center">关系运算符</td><td align="center"><code>&gt;  &gt;=  &lt;  &lt;=</code></td></tr><tr><td align="center">5</td><td align="center">相等运算符</td><td align="center"><code>==  !=  ===   !==</code></td></tr><tr><td align="center">6</td><td align="center">逻辑运算符</td><td align="center">&#96;先 &amp;&amp; 后</td></tr><tr><td align="center">7</td><td align="center">赋值运算符</td><td align="center"><code>=</code></td></tr><tr><td align="center">8</td><td align="center">逗号运算符</td><td align="center"><code>,</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语句</title>
      <link href="/2023/10/05/JavaScipt-%E8%AF%AD%E5%8F%A5/"/>
      <url>/2023/10/05/JavaScipt-%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><h2 id="1、程序三大基本结构"><a href="#1、程序三大基本结构" class="headerlink" title="1、程序三大基本结构"></a>1、程序三大基本结构</h2><ul><li>顺序结构<ul><li>特点：代码按照从上往下执行</li></ul></li><li>分支结构<ul><li>特点：根据条件执行代码</li></ul></li><li>循环结构<ul><li>特点：代码被重复执行</li></ul></li></ul><h2 id="2、分支语句"><a href="#2、分支语句" class="headerlink" title="2、分支语句"></a>2、分支语句</h2><h3 id="1-if-分支语句"><a href="#1-if-分支语句" class="headerlink" title="1. if 分支语句"></a>1. if 分支语句</h3><ul><li><p>三种形式：单分支、双分支、多分支</p><ul><li><p>单分支：</p><p><code>if(条件)&#123;  满足条件要执行的代码   &#125;</code></p></li><li><p>双分支：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line"></span><br><span class="line">   满足条件要执行的代码 </span><br><span class="line">   </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line"></span><br><span class="line">    不满足条件要执行的代码 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多分支：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;</span><br><span class="line">    满足条件<span class="number">1</span>要执行的代码 </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line">    满足条件<span class="number">2</span>要执行的代码 </span><br><span class="line">&#125;</span><br><span class="line">……</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(条件n)&#123;</span><br><span class="line">    满足条件n要执行的代码 </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    不满足所有条件要执行的代码 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：多分支判断条件是依次从上往下判断，从条件1开始到n结束</p></blockquote></li></ul></li></ul><h3 id="2-三元运算符"><a href="#2-三元运算符" class="headerlink" title="2.三元运算符"></a>2.三元运算符</h3><ul><li>符号：？ +  ： </li><li>语法：<ul><li>条件 ？满足条件执行的代码 ：不满足条件执行的代码</li><li>如：<code>1 &gt; 2 ?  alert(‘真的’) :  alert(‘假的’)</code></li></ul></li></ul><h3 id="3-switch语句"><a href="#3-switch语句" class="headerlink" title="3. switch语句"></a>3. switch语句</h3><ul><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(数据)&#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        代码<span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        代码<span class="number">2</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        代码n</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意：</p><ul><li>switch case语句一般用于等值判断，不适合区间判断</li><li>switch case一般需要配合break关键词使用，没有break会造成case穿透</li></ul></li></ul><h2 id="3、循环结构"><a href="#3、循环结构" class="headerlink" title="3、循环结构"></a>3、循环结构</h2><h3 id="1-while循环"><a href="#1-while循环" class="headerlink" title="1. while循环"></a>1. while循环</h3><ul><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;</span><br><span class="line">    要执行的代码（循环体）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>本质：循环的本质结束以某个变量为起始值，然后不断产生变化量，慢慢靠近终止条件的过程</p></li><li><p>三要素</p><ul><li>变量起始值</li><li>终止条件（没有终止条件，循环会一直执行下去，变成死循环）</li><li>变量变化量（自增或自减）</li></ul></li><li><p>break 与 continue</p><ul><li>break : 退出循环</li><li>continue：结束本次循环，继续下次循环</li></ul></li></ul><h3 id="2-for语句"><a href="#2-for语句" class="headerlink" title="2. for语句"></a>2. for语句</h3><ul><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(变量起始值;终止条件;变量变化量)&#123;</span><br><span class="line">    要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>break 与 continue</p><ul><li><p>break : 退出循环</p></li><li><p>continue：结束本次循环，继续下次循环</p></li></ul></li><li><p>循环嵌套</p><ul><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(变量起始值;终止条件;变量变化量)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(变量起始值;终止条件;变量变化量)&#123;</span><br><span class="line">         </span><br><span class="line">        要执行的代码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据类型</title>
      <link href="/2023/10/05/JavaScipt-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/10/05/JavaScipt-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="1、基本数据类型"><a href="#1、基本数据类型" class="headerlink" title="1、基本数据类型"></a>1、基本数据类型</h2><h3 id="1-数字型（number-）"><a href="#1-数字型（number-）" class="headerlink" title="1. 数字型（number ）"></a>1. 数字型（number ）</h3><ul><li>范围：整数，小数，正数，负数。</li><li>算术运算符，主要包括：加（+），减（-），乘（*），除（&#x2F;），取余（求模）（%）</li><li><code>NaN</code>: <code>NaN</code>代表一个计算错误。它是一个不正确的或者一个未定义的数学操作所得到的结果<ul><li><code>NaN</code> 是粘性的：任何对<code>NaN</code>的操作都会返回 <code>NaN</code></li></ul></li><li>注意：JavaScript 是弱数据类型，变量到底属于哪种类型，只有赋值以后才能确定。</li></ul><h3 id="2-字符串类型（string）"><a href="#2-字符串类型（string）" class="headerlink" title="2.字符串类型（string）"></a>2.字符串类型（string）</h3><ul><li>定义：通过单引号，双引号或者反引号（&#96;）包裹的数据都叫字符串</li><li>注意：<ol><li>无论单引号还是双引号必须成对使用</li><li>单引号&#x2F;双引号可以互相嵌套，但是不以自己嵌套自己</li><li>必要时可以使用转义字符\，输出单引号或双引号</li></ol></li><li>字符串的拼接：<ul><li>直接法：可以直接用 “+” 连接字符串</li><li>模板字符串法：用反引号包裹输出内容，用${}包裹变量，如：<ul><li><img src="/dimages/JavaScript/01.png" alt="示例图" style="zoom:50%;" /></li></ul></li></ul></li></ul><h3 id="3-布尔类型（boolean）"><a href="#3-布尔类型（boolean）" class="headerlink" title="3.布尔类型（boolean）"></a>3.布尔类型（boolean）</h3><ul><li>定义：在计算机中表示肯定或者否定的数据类型（值：true(真) &#x2F; false(假)）</li></ul><h3 id="4-未定义类型（undefined）"><a href="#4-未定义类型（undefined）" class="headerlink" title="4.未定义类型（undefined）"></a>4.未定义类型（undefined）</h3><ul><li>未定义类型是比较特殊的类型，只有一个值 undefined</li><li>只声明变量，不赋值的情况下，变量的默认值为 undefined</li></ul><h3 id="5-空类型（null）"><a href="#5-空类型（null）" class="headerlink" title="5.空类型（null）"></a>5.空类型（null）</h3><ul><li>null 仅仅是一个代表 ”无“、”空“ 或 ”值未知“ 的特殊值</li><li>null 与 undefined 区别：<ul><li>undefined 表示没有赋值</li><li>null 表示赋值了，但是内容为空</li></ul></li></ul><h3 id="6-检测数据类型"><a href="#6-检测数据类型" class="headerlink" title="6.检测数据类型"></a>6.检测数据类型</h3><ul><li>通过 <code>typeof</code> 运算符检测数据类型，因为 <code>typeof</code> 可以返回被检测的数据类型</li><li><code>typeof</code>的两种语法形式：<ul><li>作为运算符：<code>typeof  x</code> (常用)</li><li>函数形式：<code>typeof(x)</code></li></ul></li></ul><h3 id="7-类型转换"><a href="#7-类型转换" class="headerlink" title="7.类型转换"></a>7.类型转换</h3><p>定义：将一种数据类型的变量转换为我们需要的数据类型</p><p>注意：使用表单，prompt 获取过来的数据默认是字符串类型</p><h4 id="1-隐式转换"><a href="#1-隐式转换" class="headerlink" title="1.隐式转换"></a>1.隐式转换</h4><ul><li>”+“ 号两边只要有一个是字符串，都会把另外一个转成字符串</li><li>除了+以外的算术运算符 ，比如：- * &#x2F; 等都会把数据转成数字类型</li></ul><h4 id="2-显式转换"><a href="#2-显式转换" class="headerlink" title="2.显式转换"></a>2.显式转换</h4><ul><li>转换为数字型：Number(数据)<ul><li>如果字符串内容有非数字，转换失败时结果为 <code>NaN</code>（Not a Number）</li><li><code>NaN</code>也是 number 类型的数据，代表非数字</li></ul></li><li><code>parseInt(数据)</code> ：只保留整数</li><li><code>parseFloat(数据)</code>：只保留小数</li></ul><h2 id="2、引用数据类型"><a href="#2、引用数据类型" class="headerlink" title="2、引用数据类型"></a>2、引用数据类型</h2><ul><li>object 对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数</title>
      <link href="/2023/10/05/JavaScipt-%E5%87%BD%E6%95%B0/"/>
      <url>/2023/10/05/JavaScipt-%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="1、函数的使用"><a href="#1、函数的使用" class="headerlink" title="1、函数的使用"></a>1、函数的使用</h2><h3 id="1-函数的声明"><a href="#1-函数的声明" class="headerlink" title="1.函数的声明"></a>1.函数的声明</h3><ul><li><p>格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名()&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-函数命名规范"><a href="#2-函数命名规范" class="headerlink" title="2.函数命名规范"></a>2.函数命名规范</h3><ul><li>和变量命名规则基本一致</li><li>尽量小驼峰式命名</li><li>前缀应该为动词</li></ul><h3 id="3-函数的调用"><a href="#3-函数的调用" class="headerlink" title="3.函数的调用"></a>3.函数的调用</h3><ul><li>格式：<code>函数名 + （）</code>，如：<code>sheet()</code></li><li>注意：声明的函数必须调用才会真正被执行</li></ul><h2 id="2、函数的传参"><a href="#2、函数的传参" class="headerlink" title="2、函数的传参"></a>2、函数的传参</h2><ul><li><p>格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(参数列表)&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">m,n</span>)&#123;  <span class="comment">//函数声明</span></span><br><span class="line">       函数体</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="title function_">getSum</span>(<span class="number">1</span>,<span class="number">2</span>)  <span class="comment">//函数调用</span></span><br></pre></td></tr></table></figure></li><li><p>形参：声明函数时写在函数名右边小括号里的参数</p></li><li><p>实参：调用函数时写在函数名右边小括号里的参数</p></li></ul><h2 id="3、函数的返回值"><a href="#3、函数的返回值" class="headerlink" title="3、函数的返回值"></a>3、函数的返回值</h2><ul><li><p>格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名()&#123;</span><br><span class="line">    <span class="keyword">return</span> 数据;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意：函数名相同的时候，后面的函数覆盖前面的函数</p></li></ul><h2 id="4、函数的作用域"><a href="#4、函数的作用域" class="headerlink" title="4、函数的作用域"></a>4、函数的作用域</h2><ul><li>定义：限定代码可用的范围叫作用域</li></ul><h3 id="1-全局作用域"><a href="#1-全局作用域" class="headerlink" title="1.全局作用域"></a>1.全局作用域</h3><ul><li>定义：作用于所有代码执行的环境（整个script标签内部或一个独立的js文件）</li></ul><h3 id="2-局部作用域"><a href="#2-局部作用域" class="headerlink" title="2.局部作用域"></a>2.局部作用域</h3><ul><li>定义：作用于函数内的代码环境</li></ul><h3 id="3-变量访问原则"><a href="#3-变量访问原则" class="headerlink" title="3.变量访问原则"></a>3.变量访问原则</h3><ul><li>在能够访问到的情况下，先局部，局部没有在找全局</li></ul><h2 id="5、匿名函数"><a href="#5、匿名函数" class="headerlink" title="5、匿名函数"></a>5、匿名函数</h2><h3 id="1-匿名表达式"><a href="#1-匿名表达式" class="headerlink" title="1.匿名表达式"></a>1.匿名表达式</h3><ul><li><p>定义：将匿名函数赋值给一个变量，并且通过变量名称进行调用</p></li><li><p>格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;  </span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()   <span class="comment">//函数调用</span></span><br></pre></td></tr></table></figure></li><li><p>注意：具名函数可以在声明函数之前调用，而匿名函数只能先声明匿名表达式再调用，但二者都必须进行函数声明才能调用</p></li></ul><h3 id="2-立即执行函数"><a href="#2-立即执行函数" class="headerlink" title="2.立即执行函数"></a>2.立即执行函数</h3><ul><li><p>格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;)();  <span class="comment">//必须加分号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;());  <span class="comment">//必须加分号</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="6、转换为Boolean类型"><a href="#6、转换为Boolean类型" class="headerlink" title="6、转换为Boolean类型"></a>6、转换为Boolean类型</h2><h3 id="1-显示转换"><a href="#1-显示转换" class="headerlink" title="1.显示转换"></a>1.显示转换</h3><ul><li>格式：<ul><li><code>Boolean(内容)</code></li></ul></li><li>注意：‘’(空)、0、<code>undefined</code>、<code>null</code>、<code>false</code>、<code>NaN</code> 转换为布尔值后都是false，其余则为true</li></ul><h3 id="2-隐式转换"><a href="#2-隐式转换" class="headerlink" title="2.隐式转换"></a>2.隐式转换</h3><ul><li>有字符串的加法 “” + 1，结果是 “1”</li><li>减法 - 只能用于数字，它会使空字符串“”转换为0</li><li>null 经过数字转换之后会变为0</li><li>undefined 经过数字转换后会变为 <code>NaN</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量与常量</title>
      <link href="/2023/10/05/JavaScipt-%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/"/>
      <url>/2023/10/05/JavaScipt-%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h1><h2 id="1、变量的定义"><a href="#1、变量的定义" class="headerlink" title="1、变量的定义"></a>1、变量的定义</h2><ul><li>变量是计算机中用来存储数据的容器，它可以让计算机变得有记忆</li><li>注意：变量不是数据本身，它仅仅只是充当存储数据的容器作用</li></ul><h2 id="2、变量的基本使用"><a href="#2、变量的基本使用" class="headerlink" title="2、变量的基本使用"></a>2、变量的基本使用</h2><h3 id="1-变量的声明"><a href="#1-变量的声明" class="headerlink" title="1.变量的声明"></a>1.变量的声明</h3><p>要使用变量，要先创建变量</p><ul><li>格式：let + 变量名，如 let age</li></ul><h3 id="2-变量赋值"><a href="#2-变量赋值" class="headerlink" title="2.变量赋值"></a>2.变量赋值</h3><p>在定义变量后，就可以给变量进行赋值操作：</p><ul><li>变量名 &#x3D; 要给的值，如 age &#x3D; 20</li></ul><h3 id="3-更新变量"><a href="#3-更新变量" class="headerlink" title="3.更新变量"></a>3.更新变量</h3><p>变量赋值后，还可以通过简单地给它一个不同的值来更新它。</p><blockquote><p>注意：变量不能重复声明</p></blockquote><h3 id="4-声明多个变量"><a href="#4-声明多个变量" class="headerlink" title="4.声明多个变量"></a>4.声明多个变量</h3><p>变量声明时可以通过逗号隔开来声明多个变量</p><ul><li>如：<code>let name=&#39;小米&#39;, age=18</code></li></ul><h2 id="3、变量的本质"><a href="#3、变量的本质" class="headerlink" title="3、变量的本质"></a>3、变量的本质</h2><p>程序在内存中申请的一块用来存放数据的小空间</p><h2 id="4、变量命名规则与规范"><a href="#4、变量命名规则与规范" class="headerlink" title="4、变量命名规则与规范"></a>4、变量命名规则与规范</h2><h3 id="1-规则"><a href="#1-规则" class="headerlink" title="1.规则"></a>1.规则</h3><ol><li>不能使用关键字<ul><li>关键字：有特殊含义的字符，<code>JavaScript</code> 内置的一些英语词汇。如：let、var、if、for等</li></ul></li><li>只能用下划线、字母、数字、$组成，且数字不能开头</li><li>字母严格区分大小，如 Age 和 age 是不同的变量</li></ol><h3 id="2-规范"><a href="#2-规范" class="headerlink" title="2.规范"></a>2.规范</h3><ol><li>起名要有意义</li><li>遵守小驼峰命名法：<ul><li>第一个单词首字母小写，后面每个单词首字母大写。如：<code>userName</code></li></ul></li></ol><h2 id="5、拓展"><a href="#5、拓展" class="headerlink" title="5、拓展"></a>5、拓展</h2><h3 id="1-var"><a href="#1-var" class="headerlink" title="1. var"></a>1. var</h3><p>场景：在较旧的JavaScript，使用关键字var来声明变量，而不是let</p><p>var 声明：</p><ul><li>可以先使用再声明</li><li>var 声明过的变量可以重复声明</li></ul><h3 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h3><ul><li><p>定义：是一种可以按顺序保存数据的数据类型</p></li><li><p>声明：</p><ul><li><p><code>let 数组名 = [数据1，数据2，……，数据n]</code></p><ul><li>如：<code>let age = [18,19,20,25]</code></li></ul></li><li><p><code>let arr = new Array(数据1，数据2，……，数据n)</code></p><ul><li><code>let arr = new Array(18,19,20,25)</code></li></ul></li></ul></li><li><p>基本操作（arr为数组名）</p><ul><li><p>查询数据</p><ul><li>通过下标访问数组元素，如：arr[0],arr[1]</li></ul></li><li><p>修改数据</p><ul><li>通过下标修改数组元素，如：arr[0] &#x3D; 1</li></ul></li><li><p>添加数据</p><ul><li><code>arr.push(内容)</code>：将一个或多个元素添加到数组的末尾，并返回该数组的新长度</li><li><code>arr.unshift(内容)</code>：将一个或多个元素添加到数组的开头，并返回该数组的新长度</li></ul></li><li><p>删除数据</p><ul><li><code>arr.pop()</code>：删除数组最后一个元素，并返回该元素的值</li><li><code>arr.shift()</code>：删除数组第一个元素，并返回该元素的值</li><li><code>arr.splice(起始位置，删除的个数)</code></li></ul></li></ul></li><li><p>排序</p><ul><li>语法：数组.sort(相关函数)</li></ul></li><li><p>注意：</p><ul><li>数组是按顺序保存的，所以每个数据都有自己的编号</li><li>计算机中的编号是从0开始</li><li>在数组中，数据的编号也叫索引或者下标</li><li>数组可以存储任意类型的数据</li><li>通过<code>数组名.length</code>可以获取数组的长度</li></ul></li></ul><h2 id="6、常量的基本使用"><a href="#6、常量的基本使用" class="headerlink" title="6、常量的基本使用"></a>6、常量的基本使用</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>使用<code>const</code>声明的变量称为 ”常量“</p><h3 id="2-应用场景"><a href="#2-应用场景" class="headerlink" title="2.应用场景"></a>2.应用场景</h3><p>当某个变量永远不会改变的时候，就可以使用<code>const</code>来声明</p><blockquote><p>示例:</p><p><code>const PI = 3.14</code></p></blockquote><h3 id="3-注意"><a href="#3-注意" class="headerlink" title="3.注意"></a>3.注意</h3><p>常量不允许重新赋值，声明的时候必须赋值（只能初始化）</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript变量与常量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript介绍</title>
      <link href="/2023/10/05/JavaScipt-JavaScript%E4%BB%8B%E7%BB%8D/"/>
      <url>/2023/10/05/JavaScipt-JavaScript%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript介绍"><a href="#JavaScript介绍" class="headerlink" title="JavaScript介绍"></a>JavaScript介绍</h1><h2 id="1、Javascript是什么"><a href="#1、Javascript是什么" class="headerlink" title="1、Javascript是什么"></a>1、Javascript是什么</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>JavaScript是一种运行在客户端的编程语言，实现人机交互效果。</p><h3 id="2-作用"><a href="#2-作用" class="headerlink" title="2.作用"></a>2.作用</h3><ul><li>网页特效（监听用户的一些行为让网页作出对应的反馈）</li><li>表单验证（针对表单数据的合法性进行判断）</li><li>数据交互（获取后台数据，渲染到前端）</li><li>服务端编程（node.js）</li></ul><h3 id="3-组成"><a href="#3-组成" class="headerlink" title="3.组成"></a>3.组成</h3><ol><li>ECMAScript（Javascript语言基础）：规定了js基础语法核心知识</li><li>Web APIs<ul><li>DOM（页面文档对象模型）：操作文档，比如对页面元素进行移动，添加删除等操作</li><li>BOM（浏览器对象模型）：操作浏览器，如页面弹窗，检测窗口宽度等</li></ul></li></ol><h2 id="2、Javascript书写位置"><a href="#2、Javascript书写位置" class="headerlink" title="2、Javascript书写位置"></a>2、Javascript书写位置</h2><h3 id="1-内部Javascript"><a href="#1-内部Javascript" class="headerlink" title="1.内部Javascript"></a>1.内部Javascript</h3><ul><li>直接写在html文件里，用script标签包住</li><li>规范：script标签写在</body>上面</li><li>拓展：alert(‘你好，js’)页面弹出警告对话框</li><li>注意：通常将<script>放在HTML文件的底部，原因是因为浏览器会按照代码在文件的顺序加载HTML，如果<script>放在前面，可能会导致因HTML未被加载而失效</li></ul><h3 id="2-外部Javascript"><a href="#2-外部Javascript" class="headerlink" title="2.外部Javascript"></a>2.外部Javascript</h3><ul><li>代码写在以.js结尾的文件里，通过script标签，引入到HTML页面中。</li></ul><blockquote><p>示例图：</p><p><img src="C:\Users\86178\AppData\Roaming\Typora\typora-user-images\image-20231001123838117.png" alt="示例图"></p></blockquote><ul><li>注意：script标签中间无需写代码，否则会被忽略！</li></ul><h3 id="3-行内Javascript"><a href="#3-行内Javascript" class="headerlink" title="3.行内Javascript"></a>3.行内Javascript</h3><p>代码写在标签内部</p><blockquote><p>示例图：</p><p><img src="C:\Users\86178\AppData\Roaming\Typora\typora-user-images\image-20231001124619682.png" alt="示例图"></p></blockquote><h2 id="3、Javascript-怎么写"><a href="#3、Javascript-怎么写" class="headerlink" title="3、Javascript 怎么写"></a>3、Javascript 怎么写</h2><h3 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h3><ul><li>单行注释<ul><li>符号：//</li><li>作用：//右边的这一行内容会被机器忽略</li><li>快捷键：CTRL + /  （大部分编译器）</li></ul></li><li>块注释<ul><li>符号：/* */</li><li>作用：在/* 和 */ 之间的所有内容都会被机器忽略</li><li>快捷键：shift + alt + a (在vscode中使用)</li></ul></li></ul><h3 id="2-结束符"><a href="#2-结束符" class="headerlink" title="2.结束符"></a>2.结束符</h3><ul><li>作用：使用英文的 <strong>；</strong>代表语句结束</li><li>实际情况：在实际开发中可写可不写，浏览器可以自动推断语句的结束位置</li><li>现状：在实际开发中，越来越多的人主张省略结束符</li></ul><h3 id="3-Javascript输入输出语法"><a href="#3-Javascript输入输出语法" class="headerlink" title="3.Javascript输入输出语法"></a>3.Javascript输入输出语法</h3><ul><li><strong>输出语法</strong>：<ol><li><code>document.write(&#39;要输出的内容&#39;)</code><ul><li>作用：向body内输出内容</li><li>注意：如果输出的内容是标签，也会被解析成网页元素</li></ul></li><li><code>alert(&#39;要输出的内容&#39;)</code><ul><li>作用：页面弹出警告对话框</li></ul></li><li><code>console.log(&#39;控制台打印&#39;)</code><ul><li>控制台输出语法，程序员调试使用</li></ul></li></ol></li><li><strong>输入语法</strong><ul><li>语法：<code>prompt(&#39;请输入您的姓名：&#39;)</code></li><li>作用：显示一个对话框，对话框中包含一条文字信息，用来提示用户输入文字</li></ul></li></ul><h3 id="4-Javascript-代码执行顺序"><a href="#4-Javascript-代码执行顺序" class="headerlink" title="4.Javascript 代码执行顺序"></a>4.Javascript 代码执行顺序</h3><ul><li>按HTML文档流顺序执行Javascript代码</li><li>alert() 和 prompt() 它们会跳过页面渲染先被执行</li></ul><h3 id="5-字面量"><a href="#5-字面量" class="headerlink" title="5.字面量"></a>5.字面量</h3><ul><li>概念：在计算机科学中，字面量是在计算机中描述 事/物<ul><li>如：我们学校有9000 人，此时 9000 是数字字面量</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS拓展</title>
      <link href="/2023/10/02/CSS-%E5%8D%81%E3%80%81CSS%E6%8B%93%E5%B1%95/"/>
      <url>/2023/10/02/CSS-%E5%8D%81%E3%80%81CSS%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h1 id="十、拓展"><a href="#十、拓展" class="headerlink" title="十、拓展"></a>十、拓展</h1><h2 id="1、精灵图"><a href="#1、精灵图" class="headerlink" title="1、精灵图"></a>1、精灵图</h2><ul><li><p><strong>介绍</strong>：</p><ul><li><p>定义：项目中将多张小图片，合并成一张大图片，这张大图片称之为精灵图</p></li><li><p>优点：减少服务器发送次数，减轻服务器的压力，提高网页加载速度</p></li></ul></li><li><p><strong>使用步骤</strong></p><ol><li><p>创建一个盒子，设置盒子的尺寸和小图尺寸相同</p></li><li><p>将精灵图设置为盒子的背景图片</p></li><li><p>修改背景图位置</p><p>通过PxCook测量小图片左上角坐标，分别取负值设置给盒子的background-position：x y</p></li></ol></li></ul><h2 id="2、背景图大小"><a href="#2、背景图大小" class="headerlink" title="2、背景图大小"></a>2、背景图大小</h2><ul><li><p>格式：background-size：宽度 高度</p></li><li><p>作用：设置背景图片的大小</p></li><li><p>属性值：</p><ul><li>数字 + px：常用</li><li>百分比：相对于当前盒子自身的宽高百分比</li><li>contain：包含，将背景图片等比例缩放，直到不会超出盒子的最大</li><li>cover：覆盖，将背景图片等比例缩放，直到刚好填满整个盒子没有空白</li></ul></li></ul><h2 id="3、background连写"><a href="#3、background连写" class="headerlink" title="3、background连写"></a>3、background连写</h2><ul><li>连写形式：background：color  image  repeat  position&#x2F;size;</li><li>注意：background-size和background连写同时设置时，需要注意覆盖问题</li><li>解决：<ol><li>单独的样式写连写下面</li><li>单独的样式写在连写里面</li></ol></li></ul><h2 id="4、盒子阴影"><a href="#4、盒子阴影" class="headerlink" title="4、盒子阴影"></a>4、盒子阴影</h2><ul><li>属性名：box-shadow</li><li>属性值：<ul><li>h-shadow：必须，水平偏移量。允许负值</li><li>v-shadow：必须，垂直偏移量。允许负值</li><li>blur：可选，模糊度</li><li>spread：可选，阴影扩大</li><li>color：可选，阴影颜色</li><li>inset：可选，将阴影改为内部阴影</li></ul></li></ul><h2 id="5、过渡"><a href="#5、过渡" class="headerlink" title="5、过渡"></a>5、过渡</h2><ul><li>属性名：transition</li><li>常见属性值：<ul><li>过渡的属性：all：所有能过渡的属性都过渡、具体属性名，如：width：只有width有过渡</li><li>过渡的时长：数字 + s(秒)</li></ul></li><li>注意：<ol><li>过渡条件：默认状态和hover状态样式不同，才能有过渡效果</li><li>transition属性给需要过渡的元素本身加</li><li>transition属性设置在不同状态中，效果不同<ul><li>给默认状态设置，鼠标移入移出都有过渡效果</li><li>给hover状态设置，鼠标移入有过渡效果，移出没有</li></ul></li></ol></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/91.png" alt="示例图" style="zoom:50%;" /></blockquote><h2 id="6、骨架结构标签"><a href="#6、骨架结构标签" class="headerlink" title="6、骨架结构标签"></a>6、骨架结构标签</h2><ol><li><strong>DOCTYPE文档说明</strong></li></ol><ul><li><strong><!DOCTYPE html></strong> 文档类型声明，告诉浏览器该网页的HTML版本</li><li>注意：DOCTYPE需要写在页面的第一行，不属于HTML标签</li></ul><ol start="2"><li><strong>网页语言</strong></li></ol><ul><li><html lang="en"> 标识网页使用的语言</li><li>作用：搜索引擎归类 + 浏览器翻译</li><li>常见语言：zh-CN 简体中文 &#x2F; en 英文</li></ul><ol start="3"><li><strong>字符编码</strong></li></ol><ul><li><strong><meta charset="UTF-8"></strong> 标识网页使用的字符编码</li><li>作用：保存和打开的字符编码需要统一设置，否则可能会出现乱码</li><li>常见字符编码：<ol><li>UTF-8：玩过码，国际化的字符编码，收录了全球语言的文字</li><li>GB2312：6000+ 汉字</li><li>GBK：20000+ 汉字</li></ol></li><li>注意：开发中统一使用UTF-字符编码即可</li></ul><h2 id="7、SEO"><a href="#7、SEO" class="headerlink" title="7、SEO"></a>7、SEO</h2><p><strong>1.SEO简介</strong></p><ul><li>SEO（Search Engine Optimization）：搜索引擎优化</li><li>作用：让网站在搜索引擎上的排名靠前</li><li>提升SEO的常见方法：<ul><li>竞价排名</li><li>将网页制作成HTML后缀</li><li>标签语义化</li></ul></li></ul><p><strong>2.SEO三大标签</strong></p><ol><li>title：网页标题标签</li><li>description：网页描述标签</li><li>keywords：网页关键词标签</li></ol><h2 id="8、ico图标设置"><a href="#8、ico图标设置" class="headerlink" title="8、ico图标设置"></a>8、ico图标设置</h2><ul><li>应用场景：显示在标签页标题左侧的小图标，习惯使用.ico格式的图标</li><li>代码形式：<ul><li><code>&lt;link rel=&quot;shortcut icon&quot; href=&quot;ico图标路径&quot; type=&quot;image/x-ico&quot;&gt;</code></li></ul></li><li>注意：ico图标一般放在根目录下</li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定位</title>
      <link href="/2023/10/02/CSS-%E4%B9%9D%E3%80%81%E5%AE%9A%E4%BD%8D/"/>
      <url>/2023/10/02/CSS-%E4%B9%9D%E3%80%81%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="九、定位"><a href="#九、定位" class="headerlink" title="九、定位"></a>九、定位</h1><h2 id="1、网页常见布局方式"><a href="#1、网页常见布局方式" class="headerlink" title="1、网页常见布局方式"></a>1、网页常见布局方式</h2><ul><li><strong>标准流</strong><ul><li>块级元素独占一行，垂直布局</li><li>行内元素&#x2F;行内块元素一行显示多个，水平布局</li></ul></li><li><strong>浮动</strong><ul><li>可以让原本垂直布局的块级元素变成水平布局</li></ul></li><li><strong>定位</strong><ul><li>可以让元素自由摆放在网页的任意位置</li><li>一般用于盒子之间的层叠情况</li></ul></li></ul><h2 id="2、定位的使用"><a href="#2、定位的使用" class="headerlink" title="2、定位的使用"></a>2、定位的使用</h2><ol><li><h4 id="设置定位方式"><a href="#设置定位方式" class="headerlink" title="设置定位方式"></a>设置定位方式</h4><ul><li>属性名：position</li><li>常见属性值：<ul><li>静态定位：static</li><li>相对定位：relative</li><li>绝对定位：absolute</li><li>固定定位：fixed</li></ul></li></ul></li><li><h4 id="设置偏移值"><a href="#设置偏移值" class="headerlink" title="设置偏移值"></a>设置偏移值</h4><ul><li><p>偏移值设置分为两个方向，水平和垂直方向各选一个使用即可</p></li><li><p>选取的原则一般是就近原则</p><ul><li><p>水平方向：</p><ol><li>属性名：left</li></ol><ul><li>属性值：数字 + px</li><li>含义：距离左边的距离</li></ul><ol start="2"><li>属性名：right</li></ol><ul><li>属性值：数字 + px</li><li>含义：距离右边的距离</li></ul></li><li><p>垂直方向：</p><ol><li>属性名：top</li></ol><ul><li>属性值：数字 + px</li><li>含义：距离上边的距离</li></ul><ol start="2"><li>属性名：bottom</li></ol><ul><li>属性值：数字 + px</li><li>含义：距离下边的距离</li></ul></li></ul></li></ul></li></ol><h2 id="3、相对定位"><a href="#3、相对定位" class="headerlink" title="3、相对定位"></a>3、相对定位</h2><ul><li>含义：相对于自己之前的位置进行移动</li><li>格式：<code>position:relative</code></li><li>特点：<ol><li>需要配合方位属性实现移动</li><li>相对于自己原来位置进行移动</li><li>在网页中占位置 → 没有脱标</li></ol></li><li>注意：先写right则后写的left不生效，先写top则后写的bottom失效。</li></ul><h2 id="4、绝对定位"><a href="#4、绝对定位" class="headerlink" title="4、绝对定位"></a>4、绝对定位</h2><ul><li><p>含义：相对于非静态定位的父元素进行定位移动</p></li><li><p>格式：<code>position:absolute</code></p></li><li><p>特点：</p><ol><li>需要配合方位属性实现移动</li><li>默认相对于浏览器可视区域进行移动</li><li>在网页中不占位置 → 已经脱标</li></ol></li><li><p>注意：在absolute下盒子设置margin: 0 auto 水平居中失效，若想让盒子水平居中，可使用left: 50% ; margin: -盒子长度的一半；</p></li><li><p>子绝父相：在子元素中使用了绝对定位，一般在父元素中使用相对定位</p></li></ul><h2 id="5、固定定位"><a href="#5、固定定位" class="headerlink" title="5、固定定位"></a>5、固定定位</h2><ul><li>含义：相对于浏览器进行定位移动</li><li>格式：<code>position:fixed</code></li><li>特点：<ol><li>需要配合方位属性实现移动</li><li>相对于浏览器可视区域进行移动</li><li>在网页中不占位置 → 已经脱标</li></ol></li><li>效果：让盒子固定在屏幕中某个位置</li></ul><h2 id="6、元素的层级关系"><a href="#6、元素的层级关系" class="headerlink" title="6、元素的层级关系"></a>6、元素的层级关系</h2><ul><li>不同布局方式元素的层级关系：<ul><li>标准流 &lt; 浮动 &lt; 定位</li></ul></li><li>不同定位之间的层级关系：<ul><li>相对、绝对、固定默认层级相同，此时HTML写在下面的元素层级更高，会覆盖上面的元素。</li></ul></li><li><strong>z-index</strong> ：<ul><li>格式：<code>z-index: 整数</code></li><li>默认情况下为0，z-index后跟的整数越大，就越先显示。（配合定位生效）</li></ul></li></ul><h2 id="7、基线"><a href="#7、基线" class="headerlink" title="7、基线"></a>7、基线</h2><ul><li>定义：浏览器文字类型元素排版中存在用于对齐的基线</li><li><strong>垂直对齐方式</strong><ul><li>属性名：vertical-align</li><li>属性值：<ul><li>baseline：默认，基线对齐</li><li>top：顶部对齐</li><li>middle：中部对齐</li><li>bottom：底部对齐</li></ul></li><li>注意：浏览器在处理行内和行内块标签时，当作文字处理默认按基线对齐</li></ul></li><li><strong>光标类型</strong><ul><li>应用场景：设置鼠标光标在元素上时显示的样式</li><li>属性名：cursor</li><li>常见属性值：<ul><li>default：默认值，通常是小箭头</li><li>pointer：小手效果，提示用户可以点击</li><li>text：工字型，提示用户可以选择文字</li><li>move：十字光标，提示用户可以移动</li></ul></li></ul></li><li><strong>边框圆角</strong><ul><li>属性名：border-radius</li><li>常见属性值：数字 + px、百分比</li><li>赋值规则：从左上角开始赋值，然后顺时针赋值，没有赋值的看对角。</li></ul></li><li><strong>溢出部分显示效果</strong><ul><li>定义：盒子内容部分所超出盒子范围的区域</li><li>属性名：overflow</li><li>常见属性值：<ul><li>visible：默认值，溢出部分可见</li><li>hidden：溢出部分隐藏</li><li>scroll：无论是否溢出，都显示滚动条</li><li>auto：根据是否溢出，自动显示或隐藏滚动条</li></ul></li></ul></li><li><strong>元素本身隐藏</strong><ul><li>常见属性：<ul><li>visibility：hidden</li><li>display：none</li></ul></li><li>区别：<ul><li>visibility：占位隐藏</li><li>display：不占位隐藏</li></ul></li></ul></li><li><strong>元素整体透明度</strong><ul><li>应用场景：让元素整体（包括内容）一起变透明</li><li>属性名：opacity</li><li>属性值：0~1之间的数字<ul><li>1：表示完全不透明</li><li>0：表示完全透明</li></ul></li><li>注意：opacity 会让元素整体变透明，包括里面的内容，如：文字，子元素……</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS定位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浮动</title>
      <link href="/2023/10/02/CSS-%E5%85%AB%E3%80%81%E6%B5%AE%E5%8A%A8/"/>
      <url>/2023/10/02/CSS-%E5%85%AB%E3%80%81%E6%B5%AE%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="八、浮动"><a href="#八、浮动" class="headerlink" title="八、浮动"></a>八、浮动</h1><h2 id="1、标准流"><a href="#1、标准流" class="headerlink" title="1、标准流"></a>1、标准流</h2><ul><li>标准流：又称文档流，是浏览器在渲染显示网页内容时默认采用的一套排版规则，规定了应该以何种方式排列元素</li><li>常见标准流排版规则：<ul><li>块级元素：从上往下，<strong>垂直布局</strong>，独占一行</li><li>行内元素 或 行内块元素：从左往右，<strong>水平布局</strong>，空间不够自动折行</li></ul></li></ul><h2 id="2、浮动"><a href="#2、浮动" class="headerlink" title="2、浮动"></a>2、浮动</h2><ul><li><p>属性名：float</p></li><li><p>属性值：left、right、bottom、top……</p></li><li><p>格式：<code>float:left</code></p></li><li><p>作用：网页布局</p></li><li><p>特点：</p><ul><li>浮动元素会脱离标准流（简称：脱标），在标准流中不占位置</li><li>浮动元素比标准流高半个级别，可以覆盖标准流中的元素</li><li>浮动找浮动，下一个浮动元素会在上一个浮动元素后面左右浮动</li><li>浮动元素有特殊的显示效果<ul><li>一行可以显示多个</li><li>可以设置宽高</li></ul></li></ul></li><li><p>注意：</p><ul><li>浮动的元素不能通过text-align:center或者margin:0 auto</li></ul></li><li><p>拓展：</p><ul><li>CSS书写顺序：（提高浏览器的执行效率）<ul><li>浮动 &#x2F; display</li><li>盒子模型：margin border padding 宽度高度背景色</li><li>文字样式</li></ul></li></ul></li><li><p>清除浮动</p><ul><li><p>含义：清除浮动带来的影响</p><ul><li>影响：如果子元素浮动了，此时子元素不能撑开标准流的块级父元素</li></ul></li><li><p>原因：</p><ul><li>子元素浮动后脱标 -&gt; 不占位置</li></ul></li><li><p>目的：</p><ul><li>需要父元素有高度，从而不影响其他网页元素的布局</li></ul></li><li><p>方法：</p><ol><li><strong>直接法</strong></li></ol><ul><li>操作：<ul><li>直接给父元素加高度</li></ul></li><li>缺点：有些布局中不能固定父元素高度</li></ul><ol start="2"><li><strong>额外标签法</strong></li></ol><ul><li>操作：<ol><li>在父元素内容的最后添加一个块级元素</li><li>给添加的块级元素设置 <strong>clear:both</strong></li></ol></li><li>缺点：会在页面中添加额外的标签，会让页面的HTML结构变得复杂</li></ul><ol start="3"><li><strong>单伪元素清除法</strong></li></ol><ul><li><p>格式：</p><ul><li><code>选择器:: after&#123;content: &#39;&#39;;  display: block; clear: both &#125;</code></li></ul></li><li><p>操作：用伪元素代替额外标签</p></li><li><p>优点：项目中使用，直接给标签加类即可清除浮动</p></li></ul><ol start="4"><li><strong>双伪元素清除法</strong></li></ol><ul><li><p>格式：</p><ul><li><p><code>选择器:: before,选择器:: after&#123; content: &#39;&#39;; display: &#125;</code></p><p><code>选择器:: after&#123; clear: both ;&#125;</code></p></li></ul></li></ul><ol start="5"><li><strong>给父级设置overflow : hidden</strong>（最简单）</li></ol><ul><li>操作：直接给父级设置 overflow : hidden</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS浮动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盒子模型</title>
      <link href="/2023/10/02/CSS-%E4%B8%83%E3%80%81%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
      <url>/2023/10/02/CSS-%E4%B8%83%E3%80%81%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="七、盒子模型"><a href="#七、盒子模型" class="headerlink" title="七、盒子模型"></a>七、盒子模型</h1><h2 id="1、盒子模型的介绍"><a href="#1、盒子模型的介绍" class="headerlink" title="1、盒子模型的介绍"></a>1、盒子模型的介绍</h2><h3 id="1-概念："><a href="#1-概念：" class="headerlink" title="1.概念："></a>1.概念：</h3><ul><li>页面中的每一个标签，都可以看做是一个 “盒子”，通过盒子的视角更方便的进行布局</li><li>浏览器在渲染网页时，会将网页中的元素看做是一个个的矩形区域，我们也形象的称之为<strong>盒子</strong></li></ul><h3 id="2-定义："><a href="#2-定义：" class="headerlink" title="2.定义："></a>2.定义：</h3><ul><li>CSS中规定每个盒子分别由：内容区域（content）、内边距区域（padding）、边框区域（border）、外边距区域（margin）构成</li></ul><h3 id="3-结构分析"><a href="#3-结构分析" class="headerlink" title="3.结构分析"></a>3.结构分析</h3><ul><li><p><strong>内容区域</strong></p><ul><li>内容的宽度和高度<ul><li>作用：利用width和height属性默认设置是盒子<strong>内容区域</strong>的大小</li><li>属性：width&#x2F;height</li><li>常见取值：数字+px</li></ul></li></ul></li><li><p><strong>边框</strong></p><ul><li><p>属性名：border</p></li><li><p>属性值：数字+px</p></li><li><p>连写形式</p><ul><li>属性名：border</li><li>属性值：单个取值的连写，取值之间以空格隔开，如 border：10px solid red;</li></ul></li><li><p>常用线属性：</p><ul><li>solid：实线</li><li>dashed：虚线</li><li>dotted：点线</li></ul></li><li><p>单方向设置（只给盒子某个方向设置边框）</p><ul><li>属性名：border-方位名词，如 border-right：属性值</li><li>属性值：连写的取值</li></ul></li><li><p>单个属性</p><ul><li><p>作用：给设置边框粗细、边框样式、边框颜色效果</p></li><li><p>单个属性：</p><table><thead><tr><th align="center">作用</th><th align="center">属性名</th><th align="center">属性值</th></tr></thead><tbody><tr><td align="center">边框粗细</td><td align="center">border-width</td><td align="center">数字+px</td></tr><tr><td align="center">边框样式</td><td align="center">border-style</td><td align="center">solid、dashed、dotted</td></tr><tr><td align="center">边框颜色</td><td align="center">border-color</td><td align="center">颜色取值</td></tr></tbody></table></li></ul></li></ul></li></ul><blockquote><p>注意：如果要设计精确的盒子大小，注意要把border撑大盒子部分计算进去</p></blockquote><ul><li><strong>内边距</strong><ul><li>属性<ul><li>padding 可以连写多个属性值，每个属性值表示某个方向的内边距</li></ul></li><li>属性值<ul><li>四值：<ul><li>方向：上、右、下、左</li><li>举例：padding : 10px 30px 20px 80px; 表示上边距10px，右边距30px，下边距20px，左边距10px。</li></ul></li><li>三值：<ul><li>方向：上、左右、下</li><li>举例：padding : 10px 30px 80px; 表示上边距10px，右边距和左边距30px，下边距80px。</li></ul></li><li>两值：<ul><li>方向：上下、左右</li><li>举例：padding : 10px 80px;表示上边距和下边距10px，右边距和左边距80px。</li></ul></li></ul></li></ul></li></ul><blockquote><p>注意：padding同border一样会撑大盒子大小，在计算盒子大小时需注意！</p></blockquote><ul><li><strong>自动内减</strong><ul><li>属性名：box-sizing</li><li>属性值：border-box</li><li>应用场景：CSS盒子中使用了border或padding使盒子被撑大，border-sizing: border-box 的使用会使盒子减去被撑大的部分</li></ul></li><li><strong>外边距</strong><ul><li>属性名：margin</li><li>属性值：<ul><li>数字+px</li></ul></li><li>单个方向属性：<ul><li>margin-right：右边距</li><li>margin-left：左边距</li><li>margin-top：上边距</li><li>margin-bottom：下边距</li></ul></li><li>注意要点：<ul><li><strong>合并现象</strong><ul><li>场景：垂直布局的<strong>块级元素</strong>，上下的margin合并</li><li>结果：最终两者距离为margin的最大值</li><li>解决方法：只给其中一个盒子设置margin</li></ul></li><li><strong>塌陷问题</strong><ul><li>场景：互相嵌套的块级元素，子元素的margin-top会作用在父元素上</li><li>结果：导致父元素一起往下移动</li><li>解决方法：<ul><li>给父元素设置border-top 或者 padding-top 来分隔父子元素的margin-top</li><li>给父元素设置overflow：hidden（优解）</li><li>转换成行内块元素</li><li>设置浮动</li></ul></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS盒子模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三大特性</title>
      <link href="/2023/10/02/CSS-%E5%85%AD%E3%80%81CSS%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/"/>
      <url>/2023/10/02/CSS-%E5%85%AD%E3%80%81CSS%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="六、CSS三大特性"><a href="#六、CSS三大特性" class="headerlink" title="六、CSS三大特性"></a>六、CSS三大特性</h1><h2 id="1-继承性"><a href="#1-继承性" class="headerlink" title="1.继承性"></a>1.继承性</h2><ul><li>子元素有默认继承父元素样式的特点</li><li>可以继承的常见属性（文字控制属性都可以继承）<ul><li>color</li><li>font-style、font-weight、font-size、font-family</li><li>text-indent、text-align</li></ul></li><li>注意：<ul><li>可以通过调试工具判断样式是否可以继承</li></ul></li><li>拓展：<ul><li>继承失效情况：<ul><li>如果元素有浏览器默认样式，此时继承性依然存在，但是继承会失效<ul><li><ol><li>a标签的color会继承失效</li><li>h系列标签的font-size会失效</li></ol></li></ul></li></ul></li></ul></li></ul><h2 id="2-层叠性"><a href="#2-层叠性" class="headerlink" title="2.层叠性"></a>2.层叠性</h2><ul><li>特性：<ul><li>给同一个标签设置不同的样式——&gt;此时样式会层叠叠加——&gt;会共同作用在标签上</li><li>给同一个标签设置相同的样式——&gt;此时样式会层叠覆盖——&gt;最终写在最后的样式会生效</li></ul></li><li>注意：<ul><li>当样式冲突时，只有当选择器优先级相同时，才能通过层叠性判断结果</li></ul></li></ul><h2 id="3-优先级"><a href="#3-优先级" class="headerlink" title="3.优先级"></a>3.优先级</h2><ul><li>特性：不同的选择器具有不同的优先级，优先级高的选择器样式会覆盖优先级低选择器的样式</li><li>优先级顺序：<ul><li>继承 &lt; 通配符 &lt; 标签选择器 &lt; 类选择器 &lt; id选择器 &lt; 行内样式 &lt; !important</li></ul></li><li>注意点：<ul><li>!important写在属性值后面，分号的前面！</li><li>!important不能提升继承的优先级，只要是<strong>继承</strong>，它的优先级就最低</li><li>实际开发中不建议使用!important</li></ul></li><li><strong>权重叠加计算</strong><ul><li>应用场景：如果是复合选择器，此时需要通过权重叠加计算方法，判断最终哪个选择器优先级最高会生效</li><li>优先级比较顺序（复合选择器中）：<ul><li>行内样式个数（第一级） &gt; id选择器个数（第二级） &gt; 类选择器个数 （第三级）&gt; 标签选择器个数（第四级）</li></ul></li><li>比较规则：<ul><li>从第一级开始依次往后比较，如果前面的比较出来了，就停止比较</li><li>比较后，如果所有等级的数字相同，表示优先级相同，则比较层叠性</li></ul></li><li>注意：!important所在处如果不是继承，则权重最高！继承权重最低！</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/51.png" alt="示例图" style="zoom:50%;" /></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS三大特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元素显示模式</title>
      <link href="/2023/10/02/CSS-%E4%BA%94%E3%80%81%E5%85%83%E7%B4%A0%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/10/02/CSS-%E4%BA%94%E3%80%81%E5%85%83%E7%B4%A0%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="五、元素显示模式"><a href="#五、元素显示模式" class="headerlink" title="五、元素显示模式"></a>五、元素显示模式</h1><h2 id="1-块级元素"><a href="#1-块级元素" class="headerlink" title="1.块级元素"></a>1.块级元素</h2><ul><li>显示特点：<ul><li>独占一行（一行只能显示一个）</li><li>宽度默认是父元素的宽度，高度默认由内容撑开</li><li>可以设置宽高</li></ul></li><li>代表标签：<ul><li>div、p、h系列、ul、li、dl、dt、dd、form、header、nav……</li></ul></li></ul><h2 id="2-行内元素"><a href="#2-行内元素" class="headerlink" title="2.行内元素"></a>2.行内元素</h2><ul><li>显示特点：<ul><li>一行可以显示多个</li><li>宽度和高度默认由内容撑开</li><li>不可以设置宽高</li></ul></li><li>代表标签<ul><li>a、span、b、i、s、strong、ins、em、del……</li></ul></li><li>注意<ul><li>margin 和 padding 对行内标签的垂直位置不生效<ul><li>解决方案：使用 line-height 改变标签的垂直位置</li></ul></li></ul></li></ul><h2 id="3-行内块元素"><a href="#3-行内块元素" class="headerlink" title="3.行内块元素"></a>3.行内块元素</h2><ul><li>显示特点：<ul><li>一行可以显示多个</li><li>可以设置宽高</li></ul></li><li>代表标签<ul><li>input、textarea、button、select……</li><li>特殊情况：Img标签有行内块元素特点，但是Chrome调试工具中显示结果是inline</li></ul></li></ul><h2 id="4-元素显示模式转换"><a href="#4-元素显示模式转换" class="headerlink" title="4.元素显示模式转换"></a>4.元素显示模式转换</h2><ul><li>目的：改变元素默认的显示模式，让元素符合布局要求</li><li>语法：<ul><li>display：block <ul><li>作用：转换成块级元素</li></ul></li><li>display：inline-block<ul><li>作用：转换成内块元素</li></ul></li><li>display：inline<ul><li>转换成行内元素</li></ul></li></ul></li></ul><h2 id="5-拓展"><a href="#5-拓展" class="headerlink" title="5.拓展"></a>5.拓展</h2><ul><li>块级元素一般作为大容器，可以嵌套：文本、块级元素、行内元素、行内块元素……<ul><li><strong>但是</strong>p标签中不要嵌套div、p、h等块级元素</li></ul></li><li>a标签内部可以嵌套任意元素<ul><li><strong>但是</strong>a标签不能嵌套a标签</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS元素显示模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背景</title>
      <link href="/2023/10/02/CSS-%E5%9B%9B%E3%80%81%E8%83%8C%E6%99%AF/"/>
      <url>/2023/10/02/CSS-%E5%9B%9B%E3%80%81%E8%83%8C%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="四、背景"><a href="#四、背景" class="headerlink" title="四、背景"></a>四、背景</h1><h3 id="1-背景颜色"><a href="#1-背景颜色" class="headerlink" title="1.背景颜色"></a>1.背景颜色</h3><ul><li>属性名：background-color</li><li>属性值：<ul><li>颜色取值：关键字、rgb表示法、ragba表示法、十六进制……</li></ul></li><li>注意：</li><li>背景颜色默认是<strong>透明</strong>：rgba(0，0，0，0)</li><li>背景颜色不会影响盒子大小，并且还能看清盒子的大小和位置，一般在布局中会习惯先给盒子设置背景颜色</li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/31.png" alt="示例图" style="zoom:50%;" /></blockquote><h3 id="2-背景图片"><a href="#2-背景图片" class="headerlink" title="2.背景图片"></a>2.背景图片</h3><ul><li>属性名：background-image</li><li>属性值：background-image：url(“图片的路径”);</li><li>注意：<ul><li>背景图片中url中可以省略引号</li><li>背景图片默认是在水平和垂直方向平铺的</li><li>背景图片仅仅是指给盒子起到装饰效果，类似于背景颜色，是不能撑开盒子的</li></ul></li></ul><img src="/dimages/CSS/32.png" alt="示例图" style="zoom:50%;" /><h3 id="3-背景平铺"><a href="#3-背景平铺" class="headerlink" title="3.背景平铺"></a>3.背景平铺</h3><ul><li>属性名：background-repeat</li><li>属性值：<ul><li>repeat：水平和垂直方向都平铺（默认值）</li><li>no-repeat：不平铺</li><li>repeat-x：沿水平方向平铺</li><li>repeat-y：沿垂直方向平铺</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/33.png" alt="示例图" style="zoom:50%;" /></blockquote><h3 id="4-背景位置"><a href="#4-背景位置" class="headerlink" title="4.背景位置"></a>4.背景位置</h3><ul><li>background-position</li><li>属性值：background-position：水平方向位置，垂直方向位置；<ul><li>方位名词：<ul><li>水平方向<ul><li>left</li><li>center</li><li>right</li></ul></li><li>垂直方向<ul><li>top</li><li>center</li><li>bottom</li></ul></li></ul></li><li>数字+px（坐标）<ul><li>坐标系<ul><li>原点(0,0)</li><li>x轴</li><li>y轴</li></ul></li></ul></li></ul></li><li>注意：<ul><li>方位名词取值和坐标取值可以混合使用，第一个取值表示水平方向，第二个取值表示垂直方向</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/34.png" alt="示例图" style="zoom:50%;" /></blockquote><h3 id="5-background连写形式"><a href="#5-background连写形式" class="headerlink" title="5.background连写形式"></a>5.background连写形式</h3><ul><li>属性名：background</li><li>形式：<ul><li>如：background：color image repeat position</li></ul></li><li>注意：<ul><li>如果需要设置单独的样式和连写<ul><li>要么把单独的样式写在连写的下面</li><li>要么把单独的样式写在连写的里面</li></ul></li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/35.png" alt="示例图" style="zoom:50%;" /></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS背景 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字体与文本样式</title>
      <link href="/2023/10/02/CSS-%E4%B8%89%E3%80%81%E5%AD%97%E4%BD%93%E4%B8%8E%E6%A0%B7%E5%BC%8F/"/>
      <url>/2023/10/02/CSS-%E4%B8%89%E3%80%81%E5%AD%97%E4%BD%93%E4%B8%8E%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="三、字体与文本样式"><a href="#三、字体与文本样式" class="headerlink" title="三、字体与文本样式"></a>三、字体与文本样式</h1><h2 id="3-1、字体样式"><a href="#3-1、字体样式" class="headerlink" title="3.1、字体样式"></a>3.1、字体样式</h2><h3 id="1-字体大小"><a href="#1-字体大小" class="headerlink" title="1.字体大小"></a>1.<strong>字体大小</strong></h3><ul><li>属性名：font-size</li><li>取值：数字 + px</li><li>注意：<ul><li>谷歌浏览器默认文字大小是16px</li><li>单位需要设置，否则无效</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/21.png" alt="示例图" style="zoom:50%;" /></blockquote><h3 id="2-字体粗细"><a href="#2-字体粗细" class="headerlink" title="2.字体粗细"></a>2.<strong>字体粗细</strong></h3><ul><li>属性名：font-weight</li><li>取值：<ul><li>关键字：<ul><li>正常：normal</li><li>加粗：bold</li></ul></li><li>纯数字：（100~900的整百数）<ul><li>正常：400</li><li>加粗：700</li></ul></li></ul></li><li>注意：<ul><li>不是所有字体都提供九种粗细，因此部分取值页面中无变化</li><li>实际开发中以：正常、加粗两种取值使用最多</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/22.png" alt="示例图" style="zoom:50%;" /></blockquote><h3 id="3-字体样式"><a href="#3-字体样式" class="headerlink" title="3.字体样式"></a>3.<strong>字体样式</strong></h3><ul><li>属性名：font-style</li><li>取值：<ul><li>正常（默认）：normal</li><li>倾斜：italic</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/23.png" alt="示例图" style="zoom:50%;" /></blockquote><h3 id="4-字体类型"><a href="#4-字体类型" class="headerlink" title="4.字体类型"></a>4.<strong>字体类型</strong></h3><ul><li>属性名：font-family</li><li>取值：微软黑雅、黑体、宋体……</li><li>渲染规则：<ul><li>从左往右按照顺序查找，如果系统中未安装该字体，则显示下一个字体</li><li>如果都不支持，此时会根据操作系统，显示最后字体系列的默认字体</li></ul></li><li>注意：<ul><li>如果字体名称中存在多个单词，推荐使用引号包裹</li><li>最后一项字体系列不需要用引号包裹</li><li>网页开发时，尽量使用系统常见自带字体，保证不同用户浏览网页都可以正确显示</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/24.png" alt="示例图" style="zoom:50%;" /></blockquote><h3 id="5-font属性"><a href="#5-font属性" class="headerlink" title="5.font属性"></a>5.<strong>font属性</strong></h3><ul><li>属性名：font</li><li>取值：<ul><li>font：style  weight  size  family</li></ul></li><li>省略要求：<ul><li>只能省略前两个，如果省略了相当于设置了默认值</li></ul></li><li>注意：如果需要同时设置单独和连写形式<ul><li>要么把单独的样式写在连写的下面</li><li>要么把单独的样式写在连写的里面</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/25.png" alt="示例图" style="zoom:50%;" /></blockquote><h2 id="3-2、文本样式"><a href="#3-2、文本样式" class="headerlink" title="3.2、文本样式"></a>3.2、文本样式</h2><h3 id="1-文本缩进"><a href="#1-文本缩进" class="headerlink" title="1.文本缩进"></a>1.<strong>文本缩进</strong></h3><ul><li>属性名：text-indent</li><li>取值：<ul><li>数字+px</li><li>数字+em  (1em &#x3D; 当前标签的font-size的大小)</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/26.png" alt="示例图" style="zoom:50%;" /></blockquote><h3 id="2-文本水平对齐方式"><a href="#2-文本水平对齐方式" class="headerlink" title="2.文本水平对齐方式"></a>2.<strong>文本水平对齐方式</strong></h3><ul><li>属性名：text-align</li><li>取值：<ul><li>left：左对齐</li><li>center：居中对齐</li><li>right：右对齐</li></ul></li><li>注意：<ul><li>如果需要让文本水平居中，text-align属性给文本所在标签（文本的父元素）设置</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/27.png" alt="示例图" style="zoom:50%;" /></blockquote><h3 id="3-文本修饰"><a href="#3-文本修饰" class="headerlink" title="3.文本修饰"></a>3.<strong>文本修饰</strong></h3><ul><li>属性名：text-decoration</li><li>取值：<ul><li>underline：下划线</li><li>line-through：删除线</li><li>overline：上划线</li><li>none：无装饰线</li></ul></li><li>注意：<ul><li>开发中会使用text-decoration：none；清除a标签默认的下划线</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/28.png" alt="示例图" style="zoom:50%;" /></blockquote><h3 id="4-行高"><a href="#4-行高" class="headerlink" title="4.行高"></a>4.<strong>行高</strong></h3><ul><li>属性名：line-height</li><li>作用：控制一行的上下间距</li><li>取值：<ul><li>数字 + px</li><li>倍数（当前标签font-size的倍数）</li></ul></li><li>应用：<ul><li>让单行文本垂直居中可以设置line-height：文字父元素高度</li><li>网页精准布局时，会设置line-height：1 可以取消上下间距</li></ul></li><li>行高与font连写的注意：<ul><li>如果同时设置了行高和font连写，注意覆盖问题</li><li>font：style weight size&#x2F;line-height family;</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/29.png" alt="示例图" style="zoom:50%;" /></blockquote><h3 id="5-拓展"><a href="#5-拓展" class="headerlink" title="5.拓展"></a>5.拓展</h3><p><strong>1.颜色</strong></p><ul><li>属性名：<ul><li>文字颜色：color</li><li>背景颜色：background-color</li></ul></li><li>属性值：<ul><li>关键字：red、green、bule……</li><li>rgb：红绿蓝三原色，每项取值范围（0~255），如rgb(0，0，0)</li><li>rgba：红绿蓝三原色 + a表示透明度，a的取值范围（0~1），如rgba(255，255，255，0.5)</li><li>十六进制表示法：#开头，将数字转换成十六进制表示，如#000000，简写#000</li></ul></li></ul><p><strong>2.margin</strong></p><ul><li><strong>margin：0 auto</strong> 可以实现div、p、h水平居中</li><li>注意：<ul><li>如果需要让div、p、h（大盒子）水平居中，直接给当前元素本身设置即可</li><li>margin：0 auto 一般针对于固定宽度的盒子，如果大盒子没有设置宽度，此时会默认占满父元素的宽度</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS字体与文本样式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择器</title>
      <link href="/2023/10/02/CSS-%E4%BA%8C%E3%80%81%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/2023/10/02/CSS-%E4%BA%8C%E3%80%81%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="二、选择器"><a href="#二、选择器" class="headerlink" title="二、选择器"></a>二、选择器</h1><h2 id="1-标签选择器"><a href="#1-标签选择器" class="headerlink" title="1.标签选择器"></a>1.<strong>标签选择器</strong></h2><ul><li>格式：<strong>标签名</strong> {css属性名：属性值； }</li><li>作用：通过标签名，找到页面中所有这类标签，设置样式</li><li>注意：<ul><li>标签选择器选择的是一类标签，而不是单独某一个</li><li>标签选择器无论嵌套关系有多深，都能找到对应的标签</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/11.png" alt="示例图" style="zoom: 67%;" /></blockquote><h2 id="2-类选择器"><a href="#2-类选择器" class="headerlink" title="2.类选择器"></a>2.<strong>类选择器</strong></h2><ul><li>格式：**.类名**{css属性名：属性值；}</li><li>作用：通过类名，找到页面中所有带有这个类名的标签，设置样式</li><li>注意：<ul><li>所有标签上都有class属性，class属性的属性组称为类名</li><li>类名可以由数字、字母、下划线、中划线组成，但不能以数字或中划线开头</li><li>一个标签可以同时有多个类名，类名之间以空格隔开</li><li>类名可以重复，一个类选择器可以同时选中多个标签</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/12.png" alt="示例图" style="zoom: 50%;" /></blockquote><h2 id="3-id选择器"><a href="#3-id选择器" class="headerlink" title="3.id选择器"></a>3.id<strong>选择器</strong></h2><ul><li>格式：**#id属性值**{css属性名：属性值；}</li><li>作用：通过id属性值，找到页面中带有这个id属性值的标签，设置样式</li><li>注意：<ul><li>所有标签上都有id</li><li>id属性值类似于身份证号码，在一个页面中是唯一的，不可重复的</li><li>一个标签上只能有一个id属性值</li><li>一个id选择器只能选中一个标签</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/13.png" alt="示例图" style="zoom:50%;" /><p>提醒：在Css中定义多个同名的id可能不会出错，但在js中会出错</p></blockquote><h2 id="4-通配符选择器"><a href="#4-通配符选择器" class="headerlink" title="4.通配符选择器"></a>4.<strong>通配符选择器</strong></h2><ul><li>格式：*****{css属性名：属性值；}</li><li>作用：找到页面所有的标签，设置样式</li><li>注意<ul><li>开发中使用少，只会在特殊情况下才会用到</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/14.png" alt="示例图" style="zoom:50%;" /></blockquote><h2 id="5-后代选择器"><a href="#5-后代选择器" class="headerlink" title="5.后代选择器"></a>5.后代选择器</h2><ul><li>作用：根据HTML标签的嵌套关系，选择父元素后代中满足条件的元素</li><li>格式：选择器1(父类选择器)+ 空格 + 选择器2(后代选择器){Css}</li><li>结果：<ul><li>在选择器1所找到标签的后代（儿子、孙子、重孙子……）中，找到满足选择器2的标签，设置样式</li></ul></li><li>注意点：<ul><li>后代包括：儿子、孙子、重孙子……</li><li>后代选择器中，选择器与选择器之前通过<strong>空格</strong>隔开</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/15.png" alt="示例图" style="zoom:50%;" /></blockquote><h2 id="6-子代选择器"><a href="#6-子代选择器" class="headerlink" title="6.子代选择器"></a>6.子代选择器</h2><ul><li>作用：根据HTML标签的嵌套关系，选择父元素子代中满足条件的元素</li><li>格式：选择器1(父类选择器) &gt; 选择器(子代选择器){Css}</li><li>结果：<ul><li>在选择器1所找到标签的子代(儿子)中，找到满足选择器2的标签，设置样式</li></ul></li><li>注意：<ul><li>子代选择器：儿子（只包括父类的后一代）</li><li>子代选择器中，选择器与选择器之间通过 <strong>&gt;</strong> 隔开</li></ul></li></ul><blockquote><img src="/dimages/CSS/16.png" alt="示例图" style="zoom:50%;" /></blockquote><h2 id="7-并集选择器"><a href="#7-并集选择器" class="headerlink" title="7.并集选择器"></a>7.并集选择器</h2><ul><li>作用：同时选择多组标签，设置相同的样式</li><li>格式：选择器1 ，选择器2{Css}</li><li>结果：<ul><li>找到选择器1和选择器2选中的标签，设置样式</li></ul></li><li>注意：<ul><li>并集选择器中的每组选择器之间通过 <strong>，</strong>(逗号) 分隔</li><li>并集选择器中的每组选择器可以是基础选择器或者复合选择器</li><li>并集选择器中的每组选择器通常一行写一个，提高代码的可读性</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/17.png" alt="示例图" style="zoom:50%;" /></blockquote><h2 id="8-交集选择器"><a href="#8-交集选择器" class="headerlink" title="8.交集选择器"></a>8.交集选择器</h2><ul><li>作用：选中页面中同时满足多个选择器的标签</li><li>格式：选择器1选择器2{Css}（选择器之间无空格隔开）</li><li>结果：<ul><li>找到页面中既能被选择器1选中，又能被选择器2选中的标签，设置样式</li></ul></li><li>注意：<ul><li>交集选择器中的选择器之间是紧挨着的，不能分隔</li><li>交集选择器中如果有标签选择器，标签选择器必须写在最前面</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/18.png" alt="示例图" style="zoom:50%;" /></blockquote><h2 id="9-hover伪类选择器"><a href="#9-hover伪类选择器" class="headerlink" title="9.hover伪类选择器"></a>9.hover伪类选择器</h2><ul><li>作用：选中鼠标悬停在元素上的状态，设置样式</li><li>格式：选择器：hover{Css}</li><li>注意：<ul><li>伪类选择器选中的是元素的某种状态</li></ul></li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/19.png" alt="示例图" style="zoom:50%;" /></blockquote><h2 id="10-结构伪类选择器"><a href="#10-结构伪类选择器" class="headerlink" title="10.结构伪类选择器"></a>10.结构伪类选择器</h2><ul><li><p>作用：根据元素在HTML的结构关系查找元素</p></li><li><p>应用场景：常用于查找某父级选择器中的子元素</p></li><li><p>优势：减少对于HTML中类的依赖，有利于保持代码整洁</p></li><li><p>格式：</p><ul><li><p><code>E:first-child&#123; &#125;</code> ：匹配父元素中第一个子元素，并且是E元素。</p></li><li><p><code>E:last-child&#123; &#125;</code>：匹配父元素中最后一个子元素，并且是E元素。</p></li><li><p><code>E:nth-child(n)&#123; &#125;</code>：匹配父元素中第n个子元素，并且是E元素。</p></li><li><p><code>E:nth-last-child(n)&#123; &#125;</code>：匹配父元素中倒数第n个子元素，并且是E元素。</p><ul><li><p>注意：n 除了可以为数字外，还可以为数学公式，如：</p><table><thead><tr><th align="center">功能</th><th align="center">公式</th></tr></thead><tbody><tr><td align="center">偶数</td><td align="center">2n、even</td></tr><tr><td align="center">奇数</td><td align="center">2n+1、2n-1、odd</td></tr><tr><td align="center">找到前5个</td><td align="center">-n+5</td></tr><tr><td align="center">找到从第5个往后</td><td align="center">n+5</td></tr></tbody></table></li></ul></li></ul></li></ul><h2 id="11-伪元素"><a href="#11-伪元素" class="headerlink" title="11.伪元素"></a>11.伪元素</h2><ul><li>应用场景：一般页面中的非主体内容可以使用伪元素</li><li>区别：<ul><li>元素：HTML设置的标签</li><li>伪元素：由CSS模拟出的标签效果</li></ul></li><li>种类：<ul><li>父元素 + <code>::before</code><ul><li>作用：在父元素内容的最前添加一个伪元素</li></ul></li><li>父元素 + <code>::after</code><ul><li>作用：在父元素内容的最后添加一个伪元素</li></ul></li></ul></li><li>注意：<ul><li>必须设置content属性才能生效</li><li>伪元素默认是行内元素</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识CSS</title>
      <link href="/2023/10/02/CSS-%E4%B8%80%E3%80%81%E5%88%9D%E8%AE%A4%E8%AF%86CSS/"/>
      <url>/2023/10/02/CSS-%E4%B8%80%E3%80%81%E5%88%9D%E8%AE%A4%E8%AF%86CSS/</url>
      
        <content type="html"><![CDATA[<h1 id="一、初识Css"><a href="#一、初识Css" class="headerlink" title="一、初识Css"></a>一、初识Css</h1><h3 id="1-Css介绍"><a href="#1-Css介绍" class="headerlink" title="1.Css介绍"></a>1.Css介绍</h3><ul><li>Css:层叠样式表（Cascading style sheets）</li></ul><h3 id="2-Css语法规则"><a href="#2-Css语法规则" class="headerlink" title="2.Css语法规则"></a>2.Css语法规则</h3><ul><li>Css写在style标签中，style标签一般写在head标签里面，title标签下面</li></ul><h3 id="3-Css引入方式"><a href="#3-Css引入方式" class="headerlink" title="3.Css引入方式"></a>3.Css引入方式</h3><p>1.<strong>内嵌式</strong></p><ul><li>Css写在style标签中</li></ul><blockquote><p>注意：style标签虽然可以写在页面任意位置，但是通常约定写在head标签中</p><p>示例图：</p><img src="/dimages/CSS/01.png" alt="示例图" /></blockquote><p>2.<strong>外联式</strong></p><ul><li>Css写在一个单独的.css文件中</li></ul><blockquote><p>注意：需要通过link标签在网页中引入</p><p>示例图：</p><img src="/dimages/CSS/02.png" alt="示例图" /></blockquote><p>3.<strong>行内式</strong></p><ul><li>Css写在标签的style属性中</li></ul><blockquote><p>示例图：</p><img src="/dimages/CSS/03.png" alt="示例图" /></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 初识CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统概论第一章的学习总结</title>
      <link href="/2023/09/14/%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
      <url>/2023/09/14/%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="1、数据库系统概述"><a href="#1、数据库系统概述" class="headerlink" title="1、数据库系统概述"></a>1、数据库系统概述</h1><h2 id="1-1、四个基本概念"><a href="#1-1、四个基本概念" class="headerlink" title="1.1、四个基本概念"></a>1.1、四个基本概念</h2><h3 id="1-数据"><a href="#1-数据" class="headerlink" title="1.数据"></a>1.数据</h3><ul><li>数据是数据库中储存的基本对象</li><li>数据的定义<ul><li>描述事物的符号记录</li></ul></li><li>数据的种类<ul><li>数字、文字、图形、图像、音频、视频等</li></ul></li></ul><h3 id="2-数据库"><a href="#2-数据库" class="headerlink" title="2.数据库"></a>2.数据库</h3><ul><li>数据库的定义<ul><li>数据库（Database，简称DB）是长期存储在计算机内，有组织的、可共享的大量数据的集合</li></ul></li><li>数据库的基本特征<ul><li>数据库按一定的数据模型组织、描述和储存</li><li>具有较小的冗（rǒng）余度</li><li>较高的数据独立性</li><li>易扩展性</li><li>可为各种用户共享</li></ul></li></ul><h3 id="3-数据库管理系统"><a href="#3-数据库管理系统" class="headerlink" title="3.数据库管理系统"></a>3.数据库管理系统</h3><ul><li><p>什么是数据库管理系统</p><ul><li>位于用户与操作系统之间的一层数据管理软件</li><li>是基础软件，是一个大型复杂的软件系统</li></ul></li><li><p>数据库管理系统的用途</p><ul><li>科学地组织和存储数据、高效地获取和维护数据</li></ul></li><li><p>数据库管理系统的主要功能</p><ul><li><p>数据定义功能</p><ul><li>提供数据定义语言（DDL）</li><li>定义数据库中的数据对象</li></ul></li><li><p>数据组织、存储和管理</p><ul><li>分类组织、存储和管理各种数据</li><li>确定组织数据的文件结构和存取方式</li><li>实现数据之间的联系</li><li>提供多种存取方法提高存取效率</li></ul></li><li><p>数据操纵功能</p><ul><li>提供数据操纵语言（DML）</li><li>实现对数据库的基本操纵（插入、删除、查询和修改）</li></ul></li><li><p>数据库事务管理和运行管理</p><ul><li>数据库在建立、运行和维护时由数据库管理系统统一管理和控制</li><li>保证数据的安全性、完整性、多用户对数据的并发使用</li><li>发生故障后的系统恢复</li></ul></li><li><p>数据库的建立和维护功能</p><ul><li>数据库初始数据的装载和转换</li><li>数据库转储、恢复功能</li><li>数据库的重组织</li><li>性能监视、分析等</li></ul></li><li><p>其他功能</p><ul><li>数据库管理系统与网络中其他软件系统的通信</li><li>数据库管理系统与系统之间的数据转换</li><li>异构数据库之间的互访和互操作</li></ul></li></ul></li></ul><h3 id="4-数据库系统"><a href="#4-数据库系统" class="headerlink" title="4.数据库系统"></a>4.数据库系统</h3><ul><li>数据库系统（Database System,简称DBS）</li><li>数据库系统的构成<ul><li>数据库</li><li>数据库管理系统</li><li>应用程序</li><li>数据库管理员</li></ul></li></ul><h2 id="1-2、数据管理技术的产生和发展"><a href="#1-2、数据管理技术的产生和发展" class="headerlink" title="1.2、数据管理技术的产生和发展"></a>1.2、数据管理技术的产生和发展</h2><h4 id="1-什么是数据管理"><a href="#1-什么是数据管理" class="headerlink" title="1.什么是数据管理"></a>1.什么是数据管理</h4><ul><li>对数据进行分类、组织、编码、存储、检索和维护</li><li>数据处理的中心问题</li></ul><h4 id="2-数据管理技术的发展过程"><a href="#2-数据管理技术的发展过程" class="headerlink" title="2.数据管理技术的发展过程"></a>2.数据管理技术的发展过程</h4><h5 id="1-人工管理阶段（20世纪50年代中之前）"><a href="#1-人工管理阶段（20世纪50年代中之前）" class="headerlink" title="1.人工管理阶段（20世纪50年代中之前）"></a>1.人工管理阶段（20世纪50年代中之前）</h5><ul><li>特点：<ol><li>数据不保存</li><li>应用程序管理数据</li><li>数据不共享，冗余度极大</li><li>数据不具有独立性</li></ol></li></ul><h5 id="2-文件管理阶段（20世纪50年代末–60年代中）"><a href="#2-文件管理阶段（20世纪50年代末–60年代中）" class="headerlink" title="2.文件管理阶段（20世纪50年代末–60年代中）"></a>2.文件管理阶段（20世纪50年代末–60年代中）</h5><ul><li>特点：<ol><li>数据可以长期保存</li><li>由文件系统管理数据</li><li>数据共享性差，冗余度大</li><li>数据独立性差</li></ol></li></ul><h5 id="3-数据库系统阶段（20世纪60年代末–现在）"><a href="#3-数据库系统阶段（20世纪60年代末–现在）" class="headerlink" title="3.数据库系统阶段（20世纪60年代末–现在）"></a>3.数据库系统阶段（20世纪60年代末–现在）</h5><h2 id="1-3、数据库系统的特点"><a href="#1-3、数据库系统的特点" class="headerlink" title="1.3、数据库系统的特点"></a>1.3、数据库系统的特点</h2><h4 id="1-数据结构化"><a href="#1-数据结构化" class="headerlink" title="1.数据结构化"></a>1.数据结构化</h4><ul><li>数据的整体结构化是数据库的主要特征之一，也是数据库系统与文件系统的本质区别</li><li>整体结构化<ul><li>不再仅仅针对某一个应用，而是面向全组织</li><li>不仅数据内部结构化，整体是结构化的，数据之间具有联系</li><li>数据记录可以变长</li><li>数据的最小存取单位是数据项</li></ul></li><li>数据的结构用数据模型描述，无需应用程序定义</li></ul><h4 id="2-数据的共享性高，冗余度低且易扩充"><a href="#2-数据的共享性高，冗余度低且易扩充" class="headerlink" title="2.数据的共享性高，冗余度低且易扩充"></a>2.数据的共享性高，冗余度低且易扩充</h4><ul><li>数据面向整个系统，可以被多个用户、多个应用共享使用</li><li>数据共享的好处<ul><li>减少数据冗余，节约存储空间</li><li>避免数据之间的不相容性与不一致性</li><li>使系统易于扩充</li></ul></li></ul><h4 id="3-数据独立性高"><a href="#3-数据独立性高" class="headerlink" title="3.数据独立性高"></a>3.数据独立性高</h4><ul><li><h5 id="物理独立性："><a href="#物理独立性：" class="headerlink" title="物理独立性："></a>物理独立性：</h5><p>指用户的应用程序与数据库中数据的物理存储是相互独立的。当数据</p><p>的物理存储改变了，应用程序不用改变。</p></li><li><h5 id="逻辑独立性："><a href="#逻辑独立性：" class="headerlink" title="逻辑独立性："></a>逻辑独立性：</h5><p>指用户的应用程序与数据库的逻辑结构是相互独立的。数据的逻辑结构</p><p>改变了，应用程序不用改变。</p></li><li><p>数据独立性由数据库管理系统的二级映像功能来保证。</p></li></ul><h4 id="4-数据有数据库管理系统统一管理和控制"><a href="#4-数据有数据库管理系统统一管理和控制" class="headerlink" title="4.数据有数据库管理系统统一管理和控制"></a>4.数据有数据库管理系统统一管理和控制</h4><h5 id="数据库管理系统提供的数据控制功能"><a href="#数据库管理系统提供的数据控制功能" class="headerlink" title="数据库管理系统提供的数据控制功能"></a>数据库管理系统提供的数据控制功能</h5><ol><li><p>数据的安全性保护：</p><p>保护数据以防止不合法的使用造成的数据的泄漏和破坏。</p></li><li><p>数据的完整性检查：</p><p>保证数据的正确性、有效性和相容性。</p></li><li><p>并发控制：</p><p>对多用户的并发操作加以控制和协调，防止相互干扰而得到错误的结构。</p></li><li><p>数据库恢复：</p><p>将数据库从错误状态恢复到某一已知的正确状态。</p></li></ol><p>数据管理三个阶段的比较图:</p><p><img src="/dimages/Date01/01.jpg" alt="比较图"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><p>数据库是长期存储在计算机内有组织、大量、共享的数据集合。它可以公股各种用户共享，具有最小冗余度和比较高的数据独立性。</p><p>数据库管理系统在数据库建立、运行和维护时对数据库进行统一控制，以保证数据的完整性和安全性，并在多用户同时使用数据库时</p><p>进行并发控制，在发生故障后对数据库进行恢复。数据库的出现使信息系统从以加工数据的程序为中心转向围绕共享的数据库为中心</p><p>的新阶段。</p></blockquote><h1 id="2、数据模型"><a href="#2、数据模型" class="headerlink" title="2、数据模型"></a>2、数据模型</h1><ul><li>数据模型是对现实世界数据特征的抽象。通俗地讲数据模型就是现实世界的模拟。</li><li>数据模型应满足<strong>三方面</strong>要求：<ul><li>能比较真实地模拟现实世界</li><li>容易为人理解</li><li>便于在计算机上实现</li></ul></li><li>数据模型是数据库系统的核心和基础</li></ul><h2 id="2-1、两类数据模型"><a href="#2-1、两类数据模型" class="headerlink" title="2.1、两类数据模型"></a>2.1、两类数据模型</h2><ul><li><strong>概念模型</strong>（信息模型）<ul><li>按用户的观点来对数据和信息建模，主要用于数据库设计</li></ul></li><li><strong>逻辑模型和物理模型</strong><ul><li>逻辑模型主要包括层次模型、网状模型、关系模型、面向对象数据模型、对象关系模型、半结构化数据模型等</li><li>物理模型是对数据最底层的抽象，它描述数据在系统内部的表示方式和存取方法，或在磁盘和磁带上的存储方式和存取方法，是面向计算机系统的。</li></ul></li></ul><blockquote><p>把现实事务转化为数据模型的过程：先将现实世界抽象为信息世界，然后将信息世界转换为机器世界。</p></blockquote><h2 id="2-2、概念模型"><a href="#2-2、概念模型" class="headerlink" title="2.2、概念模型"></a>2.2、概念模型</h2><h4 id="1-用途"><a href="#1-用途" class="headerlink" title="1.用途"></a>1.用途</h4><ul><li>概念模型用于信息世界的建模</li><li>是现实世界到机器世界的一个中间层次</li><li>是数据库设计的有力工具</li><li>数据库设计人员和用户之间进行交流的语言</li></ul><h4 id="2-基本要求"><a href="#2-基本要求" class="headerlink" title="2.基本要求"></a>2.基本要求</h4><ul><li>较强的语义表达能力</li><li>简单、清晰、易于用户理解</li></ul><h4 id="3-信息世界中的基本概念"><a href="#3-信息世界中的基本概念" class="headerlink" title="3.信息世界中的基本概念"></a>3.信息世界中的基本概念</h4><ul><li><strong>实体</strong><ul><li>客观存在并可相互区别的事物称为实体</li><li>实体可以是具体的人、事、物，也可以是抽象的概念或联系</li></ul></li><li><strong>属性</strong><ul><li>实体所具有的某一特性称为属性</li><li>一个实体可以由若干个属性来刻画</li></ul></li><li><strong>码</strong><ul><li>唯一标识实体的属性集称为码</li></ul></li><li><strong>实体型</strong><ul><li>用实体名及其属性名集合来抽象和刻画同类实体称为实体型</li></ul></li><li><strong>实体集</strong><ul><li>同一类型实体的集合称为实体集</li></ul></li><li><strong>联系</strong><ul><li>实体内部的联系通常是值组成实体的各属性之间的联系</li><li>实体外部的联系通常是指不同实体集之间的联系</li><li>实体之间的联系有一对一，一对多和多对多等多种类型</li></ul></li></ul><h4 id="4-实体-联系方法（概念模型的表示方法）"><a href="#4-实体-联系方法（概念模型的表示方法）" class="headerlink" title="4.实体-联系方法（概念模型的表示方法）"></a>4.实体-联系方法（概念模型的表示方法）</h4><ul><li>用E-R图来描述现实世界的概念模型，E-R方法也称为E-R模型</li></ul><h2 id="2-3、数据模型的组成要素"><a href="#2-3、数据模型的组成要素" class="headerlink" title="2.3、数据模型的组成要素"></a>2.3、数据模型的组成要素</h2><h4 id="1-组成要素"><a href="#1-组成要素" class="headerlink" title="1.组成要素"></a>1.组成要素</h4><ul><li><strong>数据结构</strong><ul><li><strong>数据结构描述数据库的组成对象以及对象之间的联系</strong></li><li><strong>描述的内容</strong><ul><li>与对象的类型、内容、性质有关</li><li>与数据之间的联系有关</li></ul></li><li><strong>数据结构是对系统静态特性的描述</strong></li></ul></li><li><strong>数据操作</strong><ul><li><strong>定义</strong><ul><li>反映和规定必须遵守的基本的通用的完整性约束</li><li>提供定义完整性约束条件的机制，以反映具体应用所涉及的数据必须遵守的特定的语义约束条件</li></ul></li><li><strong>对数据库中各种对象的实例允许执行的操作的集合，包括操作及有关操作规则</strong></li><li><strong>类型</strong><ul><li>查询</li><li>更新（包括插入、删除、修改）</li></ul></li><li><strong>数据模型必须定义这些操作的确切含义、操作符号、操作规则以及实现操作的语言</strong></li><li><strong>数据操作是对系统动态特性的描述</strong></li></ul></li><li><strong>数据的完整性约束条件</strong><ul><li><strong>数据的完整性约束条件是一组完整性规则</strong></li><li><strong>完整性规则</strong>：给定的数据模型中数据及其联系所具有的制约和依存规则</li><li><strong>作用</strong>：用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效和相容</li></ul></li></ul><h2 id="2-4、常用的数据模型"><a href="#2-4、常用的数据模型" class="headerlink" title="2.4、常用的数据模型"></a>2.4、常用的数据模型</h2><ul><li><strong>层次模型</strong>（Hierarchical Model）</li><li><strong>网状模型</strong>（Network Model）</li><li><strong>关系模型</strong>（Relational Model）</li><li><strong>面向对象数据模型</strong>（Object Oriented Data Model）</li><li><strong>对象关系数据模型</strong>（Object Relational Data Model）</li><li><strong>半结构化数据模型</strong>（Semistruture Data Model）</li></ul><h2 id="2-5、层次模型"><a href="#2-5、层次模型" class="headerlink" title="2.5、层次模型"></a>2.5、层次模型</h2><ul><li><strong>层次模型是数据库系统中最早出现的数据库模型</strong></li><li>层次数据库系统的典型代表是IBM公司的IMS（Information Management System）数据库管理系统</li><li>层次模型用树形结构来表示各类实体以及实体间的联系</li></ul><h4 id="判断为层次模型的两个条件："><a href="#判断为层次模型的两个条件：" class="headerlink" title="判断为层次模型的两个条件："></a>判断为层次模型的两个条件：</h4><ul><li>有且只有一个节点没有双亲结点，这个结点称为根节点</li><li>根以外的其他结点有且只有一个双亲结点</li></ul><p>层次模型示例：<img src="/dimages/Date01/02.jpg" alt="示例图"></p><ul><li>层次模型的数据操纵<ul><li>查询</li><li>插入</li><li>删除</li><li>更新</li></ul></li><li>层次模型的完整性约束条件<ul><li>无相应的双亲结点值不能插入子女结点值</li><li>如果删除双亲结点值，则相应的子女结点值也被同时删除</li><li>更新操作时，应更新所有相应记录，以保证数据的一致性</li></ul></li><li>优点<ul><li>层次模型的数据结构比较简单清晰</li><li>查询效率高，性能优于关系模型，不低于网状模型</li><li>层次数据模型提供良好的完整性支持</li></ul></li><li>缺点<ul><li>结点之间的多对多联系表示不自然</li><li>对插入和删除操作的限制多，应用程序的编写比较复杂</li><li>查询子女结点必须通过双亲结点</li><li>层次命令趋于程序化</li></ul></li></ul><h2 id="2-6、网状模型"><a href="#2-6、网状模型" class="headerlink" title="2.6、网状模型"></a>2.6、网状模型</h2><ul><li><p><strong>网状数据库系统采用网状模型作为数据的组织方式</strong></p></li><li><p>典型代表是20世纪70年代由DBTG提出的一个系统方案–DBTG系统，也叫CODASYL</p></li><li><p>实际系统</p><ul><li>Cullinet Software公司的IDMS</li><li>Univac公司的 DMS1100</li><li>Honeywell公司的IDS&#x2F;2</li><li>HP公司的IMAGE</li></ul></li><li><p>网状模型的判断条件：</p><ul><li>允许一个以是的结点无双亲</li><li>一个结点可以有多于一个的双亲</li></ul></li><li><p>网状模型与层次模型的区别</p><ul><li>网状模型允许多个结点没有双亲结点</li><li>网状模型允许结点有多个双亲结点</li><li>网状模型允许两个结点之间有多种关系（复合关系）</li><li>网状模型可以更直接地描述现实世界</li><li>层次模型实际上是网状模型的一个特例</li></ul></li><li><p>优点</p><ul><li>能够更为直观地描述现实世界</li><li>具有良好的性能，存取效率高</li></ul></li><li><p>缺点</p><ul><li><p>结构比较复杂，而且随着应用环境的扩大，数据库的结构就变得越来越复杂，</p><p>不利于最终用户掌握</p></li><li><p>DDL、DML语言复杂，用户不容易使用</p></li><li><p>记录之间联系是通过存取路径实现的，用户必须了解系统结构的细节</p></li></ul></li></ul><h2 id="2-7、关系模型"><a href="#2-7、关系模型" class="headerlink" title="2.7、关系模型"></a>2.7、关系模型</h2><ul><li>关系数据库系统采用关系模型作为数据的组织方式</li><li>1970年美国IBM公司San Jose研究室的研究员E.F.Codd首次提出了数据库系统的关系模型</li><li>计算机厂商新推出的数据库管理系统几乎都支持关系模型</li></ul><h4 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1.数据结构"></a>1.数据结构</h4><ul><li><p>关系（Relation）</p><ul><li>一个关系对应通常说的一张表</li></ul></li><li><p>元组（Tuple）</p><ul><li>表中的一行即为一个元组</li></ul></li><li><p>属性（Attribute）</p><ul><li>表中的一列即为一个属性，给每一个属性起一个名称即属性名</li></ul></li><li><p>主码（Key）</p><ul><li>也称为码键。表中的某个属性组，它可以唯一确定一个元组</li></ul></li><li><p>域（Domain）</p><ul><li>是一组具有相同数据类型的值的集合。属性的取值范围来自某个域</li></ul></li><li><p>分量</p><ul><li>元组中的一个属性值</li></ul></li><li><p>关系模式</p><ul><li><p>对关系的描述</p><p>关系名（属性1，属性2，……，属性n）</p><p>学生（学号，姓名，年龄，……）</p></li></ul></li><li><p><strong>关系模型的数据操纵</strong></p><ul><li>查询</li><li>插入</li><li>删除</li><li>更新</li></ul></li><li><p><strong>数据操作是集合操作，操作对象和操作结果是关系</strong></p></li><li><p><strong>存取路径对用户隐蔽，用户只要指出“干什么”，不必详细说明“这么干”</strong></p></li><li><p><strong>关系的完整性约束条件</strong></p><ul><li>实体完整性</li><li>参照完整性</li><li>用户定义的完整性</li></ul></li><li><p>优点</p><ul><li>建立在严格的数学概念的基础上</li><li>概念单一<ul><li>实体和各类联系都用关系来表示</li><li>对数据的检索结果也是关系</li></ul></li><li>关系模型的存取路径对用户透明<ul><li>具有更高的数据独立性，更好的安全保密性</li><li>简化了程序员的工作和数据库开发建立的工作</li></ul></li></ul></li><li><p>缺点</p><ul><li>存取路径对用户透明，查询效率往往不如格式化数据模型</li><li>为提高性能，必须对用户的查询请求进行优化，增加了开发数据库管理系统的难度</li></ul></li></ul><h1 id="3、数据库系统的结构"><a href="#3、数据库系统的结构" class="headerlink" title="3、数据库系统的结构"></a>3、数据库系统的结构</h1><ul><li>从数据库应用开发人员角度看，数据库系统通常采用三级模式结构，是数据库系统内部的系统结构</li><li>从数据库最终用户角度看，数据库系统的结构分为：<ul><li>单用户结构</li><li>主从式结构</li><li>分布式结构</li><li>客户-服务器</li><li>浏览器-应用服务器&#x2F;数据库服务器多层结构等</li></ul></li></ul><h2 id="3-1、数据库系统模式的概念"><a href="#3-1、数据库系统模式的概念" class="headerlink" title="3.1、数据库系统模式的概念"></a>3.1、数据库系统模式的概念</h2><h3 id="1-型和值的概念"><a href="#1-型和值的概念" class="headerlink" title="1.型和值的概念"></a>1.型和值的概念</h3><ul><li>型<ul><li>对某一类数据的结构和属性的说明</li></ul></li><li>值<ul><li>是型的一个具体赋值</li></ul></li></ul><h3 id="2-模式"><a href="#2-模式" class="headerlink" title="2.模式"></a>2.模式</h3><ul><li>数据库逻辑结构和特征的描述</li><li>是型的描述，不涉及具体值</li><li>反映的是数据的结构及其联系</li><li>模式是相对稳定的</li></ul><h3 id="3-实列"><a href="#3-实列" class="headerlink" title="3.实列"></a>3.实列</h3><ul><li>模式的一个具体值</li><li>反映数据库某一时刻的状态</li><li>同一个模式可以有很多实例</li><li>实例随数据库中的数据的更新而变动</li></ul><h2 id="3-2、数据库系统的三级模式结构"><a href="#3-2、数据库系统的三级模式结构" class="headerlink" title="3.2、数据库系统的三级模式结构"></a>3.2、数据库系统的三级模式结构</h2><p>三级模式结构示意图：<img src="/dimages/Date01/03.jpg" alt="示例图"></p><h3 id="1-模式（也称为逻辑模式）"><a href="#1-模式（也称为逻辑模式）" class="headerlink" title="1.模式（也称为逻辑模式）"></a>1.模式（也称为逻辑模式）</h3><p><strong>定义：</strong></p><ul><li>数据库中全体数据的逻辑结构和特征的描述</li><li>所有用户的公共数据视图</li><li>模式是数据库系统模式结构的中间层，与数据的物理存储细节和硬件环境无关，与具体的应用程序、开发工具及高级程序设计语言无关</li></ul><blockquote><p>注意：一个数据库只有一个模式</p></blockquote><h3 id="2-外模式（也称子模式或用户模式）"><a href="#2-外模式（也称子模式或用户模式）" class="headerlink" title="2.外模式（也称子模式或用户模式）"></a>2.外模式（也称子模式或用户模式）</h3><p><strong>定义：</strong></p><ul><li>数据库用户能看见和使用的局部数据的逻辑结构和特征的描述</li><li>数据库用户的数据视图</li><li>与某一应用有关的数据的逻辑表示</li></ul><blockquote><p>补充：外模式通常是模式的子集。一个数据库可以有多个外模式</p></blockquote><h3 id="3-内模式（也称存储模式）"><a href="#3-内模式（也称存储模式）" class="headerlink" title="3.内模式（也称存储模式）"></a>3.内模式（也称存储模式）</h3><p><strong>定义：</strong></p><ul><li>数据物理结构和存储方式的描述</li><li>数据在数据库内部的组织方式</li></ul><blockquote><p>注意：一个数据库只有一个内模式</p></blockquote><h2 id="3-3、数据库的二级映像功能与数据独立性"><a href="#3-3、数据库的二级映像功能与数据独立性" class="headerlink" title="3.3、数据库的二级映像功能与数据独立性"></a>3.3、数据库的二级映像功能与数据独立性</h2><p>1.外模式&#x2F;模式映像</p><p><strong>概念：当模式改变时，由数据库管理员对各个外模式&#x2F;模式的映像作相应的改变，可以使外模式保持不变。应用程序是依据数据的外模式编写的，从而应用程序必修改，保证了数据和程序的逻辑独立性，简称数据的逻辑独立性。</strong></p><p>2.模式&#x2F;内模式映像</p><p><strong>概念：当数据库的存储结构发生改变时，由数据库管理员对模式&#x2F;内模式映像作相应改变，可以使模式保持不变，从而应用程序也不必改变，。保证了数据和程序的物理独立性，简称数据的物理独立性。</strong></p><h1 id="4、数据库系统的组成"><a href="#4、数据库系统的组成" class="headerlink" title="4、数据库系统的组成"></a>4、数据库系统的组成</h1><ol><li>硬件平台及数据库</li><li>软件</li></ol><p>数据库系统的软件主要包括：</p><ul><li><p>数据库管理系统</p></li><li><p>支持数据库管理系统运行的操作系统</p></li><li><p>具有与数据库接口的高级语言及其编译系统，便于开发应用程序</p></li><li><p>以数据库管理系统为核心的应用开发工具</p></li><li><p>为特定应用环境开发的数据库应用系统</p><p> 3.人员</p></li><li><p>职责：</p><ul><li>决定数据库中的信息内容和结构</li><li>决定数据库的存储结构和存取策略</li><li>定义数据的使用和运行</li><li>监控数据库的使用和运行</li><li>数据库的改进和重组、重构</li></ul></li></ul><h1 id="5、参考"><a href="#5、参考" class="headerlink" title="5、参考"></a>5、参考</h1><blockquote><p>本文参考于《数据库系统概论（第五版）》高等教育出版社，图片也摘自本书。如想更详细了解数据库相关信息可以参阅本书。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库系统概论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 初识数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的dos命令</title>
      <link href="/2023/09/12/%E5%B8%B8%E7%94%A8%E7%9A%84dos%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/09/12/%E5%B8%B8%E7%94%A8%E7%9A%84dos%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="常用的dos命令"><a href="#常用的dos命令" class="headerlink" title="常用的dos命令"></a>常用的dos命令</h2><h3 id="1、dir命令"><a href="#1、dir命令" class="headerlink" title="1、dir命令"></a>1、dir命令</h3><blockquote><p>格式：dir + 盘符：+ 路径名 + 子目录</p><p>功能：列出当前目录下的文件和子目录</p><p>示例：查看C盘中Windows下的目录</p><p><img src="/dimages/Dos/dir.png" alt="dir示例"></p></blockquote><h3 id="2、md命令"><a href="#2、md命令" class="headerlink" title="2、md命令"></a>2、md命令</h3><blockquote><p>格式：md + 盘符：+ 路径名 + 子目录</p><p>功能：创建一个新的子目录</p><p>示例：在D盘的demo文件夹下创建test目录</p><p><img src="/dimages/Dos/md.png" alt="示例图"></p></blockquote><h3 id="3、cd命令"><a href="#3、cd命令" class="headerlink" title="3、cd命令"></a>3、cd命令</h3><blockquote><p>格式：cd + 盘符：+ 路径名 + 子目录</p><p>功能：改变当前目录</p><p>示例：</p><ul><li>cd + \ ：退回到根目录</li></ul><p><img src="/dimages/Dos/cd.png" alt="示例图"></p><ul><li>cd + . . ：退回上一级目录</li></ul><p><img src="/dimages/Dos/cd2.png" alt="示例图"></p></blockquote><h3 id="4、rd命令"><a href="#4、rd命令" class="headerlink" title="4、rd命令"></a>4、rd命令</h3><blockquote><p>格式：rd + 盘符：+ 路径名 + 子目录</p><p>功能：删除指定目录</p><p>示例：删除D盘中demo文件下的test目录</p><p><img src="/dimages/Dos/rd.png" alt="示例图"></p><p>补充：rd命令删除文件的前提是该目录为空，如果不为空则会删除失败。</p></blockquote><h3 id="5、help命令"><a href="#5、help命令" class="headerlink" title="5、help命令"></a>5、help命令</h3><blockquote><p>格式：help</p><p>功能：查询所有命令</p><p>示例：</p><p><img src="/dimages/Dos/help.png" alt="示例图"></p></blockquote><h3 id="6、cls命令"><a href="#6、cls命令" class="headerlink" title="6、cls命令"></a>6、cls命令</h3><blockquote><p>格式：cls</p><p>功能：清除屏幕内容</p><p>示例：</p><p>cls命令执行前：</p><p><img src="/dimages/Dos/cls1.png" alt="示例图"></p><p>cls命令执行后：</p><p><img src="/dimages/Dos/cls2.png" alt="示例图"></p></blockquote><h3 id="7、ipconfig命令"><a href="#7、ipconfig命令" class="headerlink" title="7、ipconfig命令"></a>7、ipconfig命令</h3><blockquote><p>格式：ipconfig</p><p>功能：查看电脑的ip地址</p><p>示例：</p><p><img src="/dimages/Dos/ip.png" alt="示例图"></p></blockquote><h3 id="8、exit命令"><a href="#8、exit命令" class="headerlink" title="8、exit命令"></a>8、exit命令</h3><blockquote><p>格式：exit</p><p>功能：退出终端</p><p>示例：</p><p><img src="/dimages/Dos/exit.png" alt="示例图"></p></blockquote><h3 id="9、ping命令"><a href="#9、ping命令" class="headerlink" title="9、ping命令"></a>9、ping命令</h3><blockquote><p>格式：ping + 网址</p><p>功能：检查网络是否通畅或者网络连接速度的命令</p><p>示例：</p><p><img src="/dimages/Dos/ping.png" alt="示例图"></p></blockquote><h3 id="10、del命令"><a href="#10、del命令" class="headerlink" title="10、del命令"></a>10、del命令</h3><blockquote><p>格式：del + 盘符：+ 路径名 + 文件名.后缀</p><p>功能：删除指定文件</p><p>示例：</p><p><img src="/dimages/Dos/del.png" alt="示例图"></p><p>补充：del命令只是删除文件，不能删除文件夹，删除文件夹要用rd命令；del命令删除的文件无法恢复，请谨慎使用。</p></blockquote><h3 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a>拓展：</h3><table><thead><tr><th>命令</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>calc</td><td>打开计算器</td><td><img src="/dimages/Dos/calc.png" alt="示例图"></td></tr><tr><td>mspaint</td><td>打开画图工具</td><td><img src="/dimages/Dos/mspaint.png" alt="示例图"></td></tr><tr><td>notepad</td><td>打开记事本</td><td><img src="/dimages/Dos/notepad.png" alt="示例图"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dos命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java常用容器简介</title>
      <link href="/2023/09/12/Java-java%E5%B8%B8%E7%94%A8%E5%AE%B9%E5%99%A8%E7%AE%80%E4%BB%8B/"/>
      <url>/2023/09/12/Java-java%E5%B8%B8%E7%94%A8%E5%AE%B9%E5%99%A8%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p><a id="top"></a></p><h1 id="java常用容器简介"><a href="#java常用容器简介" class="headerlink" title="java常用容器简介"></a>java常用容器简介</h1><blockquote><p>前言：在Java中，容器是一种用于存储和组织数据的对象。它们提供了一种方便的方式来管理和操作数据集合。Java提供了多种类型的容器，包括数组、集合和映射等。这些容器可以用于不同的目的，例如存储一组对象、实现数据结构或进行高效的搜索和排序操作。容器在Java中扮演着重要的角色，它们是开发Java应用程序的基础。</p></blockquote><p>@<a href="%E6%96%87%E7%AB%A0%E5%86%85%E5%AE%B9">TOC</a></p><h2 id="一、容器的概念"><a href="#一、容器的概念" class="headerlink" title="一、容器的概念"></a>一、容器的概念</h2><blockquote><p>容器顾名思义就是装东西的器皿，而<strong>编程</strong>中的容器是指用来存放<strong>数据</strong>的”器皿”，方便管理和操作；如Set、List、Queue等</p></blockquote><p>为了更直观的了解容器的分类与构成，以下是一张关于容器分类的<strong>思维导图</strong>：<img src="/dimages/Javarq/rq.jpeg" alt="Java分类"></p><h2 id="二、介绍几种常用容器"><a href="#二、介绍几种常用容器" class="headerlink" title="二、介绍几种常用容器"></a>二、介绍几种常用容器</h2><h3 id="1、Collection"><a href="#1、Collection" class="headerlink" title="1、Collection"></a>1、Collection</h3><ul><li><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3></li></ul><h4 id="1-ArrayList："><a href="#1-ArrayList：" class="headerlink" title="1.ArrayList："></a>1.ArrayList：</h4><p>ArrayList是一种基于数组实现的动态数组，可以动态增长和缩小。它提供了快速的随机访问和高效的增删操作，适用于频繁访问和修改列表元素的场景。</p><blockquote><p>ArrayList 的简单演示使用：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListExample</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// 创建一个ArrayList实例，用于存储整数  </span></span><br><span class="line">        ArrayList&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 添加元素到ArrayList  </span></span><br><span class="line">        numbers.add(<span class="number">10</span>);  </span><br><span class="line">        numbers.add(<span class="number">20</span>);  </span><br><span class="line">        numbers.add(<span class="number">30</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 获取ArrayList的大小  </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> numbers.size();  </span><br><span class="line">        System.out.println(<span class="string">&quot;ArrayList的大小: &quot;</span> + size);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 遍历ArrayList并打印元素  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;ArrayList的元素:&quot;</span>);  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> numbers.get(i);  </span><br><span class="line">            System.out.println(number);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 检查ArrayList中是否包含某个元素  </span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">contains</span> <span class="operator">=</span> numbers.contains(<span class="number">20</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;ArrayList是否包含元素 20: &quot;</span> + contains);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 修改ArrayList中的元素  </span></span><br><span class="line">        numbers.set(<span class="number">1</span>, <span class="number">50</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;修改后的ArrayList元素:&quot;</span>);  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> number : numbers) &#123;  </span><br><span class="line">            System.out.println(number);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 删除ArrayList中的元素  </span></span><br><span class="line">        numbers.remove(<span class="number">2</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;删除后的ArrayList元素:&quot;</span>);  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> number : numbers) &#123;  </span><br><span class="line">            System.out.println(number);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 清空ArrayList  </span></span><br><span class="line">        numbers.clear();  </span><br><span class="line">        System.out.println(<span class="string">&quot;清空ArrayList后的大小: &quot;</span> + numbers.size());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#top">返回目录</a></p><h4 id="2-LinkedList："><a href="#2-LinkedList：" class="headerlink" title="2.LinkedList："></a>2.LinkedList：</h4><p>LinkedList是一种双向链表实现的容器，它具有高效的插入和删除操作，但访问效率较低。它适用于频繁进行插入和删除操作的场景。</p><blockquote><p>LinkedList 的简单演示使用：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedListExample</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// 创建一个LinkedList实例，用于存储字符串  </span></span><br><span class="line">        LinkedList&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 添加元素到LinkedList的末尾  </span></span><br><span class="line">        names.add(<span class="string">&quot;Alice&quot;</span>);  </span><br><span class="line">        names.add(<span class="string">&quot;Bob&quot;</span>);  </span><br><span class="line">        names.add(<span class="string">&quot;Charlie&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 在LinkedList的开头添加元素  </span></span><br><span class="line">        names.addFirst(<span class="string">&quot;Adam&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 在LinkedList的指定索引位置插入元素  </span></span><br><span class="line">        names.add(<span class="number">2</span>, <span class="string">&quot;Eve&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 获取LinkedList的大小  </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> names.size();  </span><br><span class="line">        System.out.println(<span class="string">&quot;LinkedList的大小: &quot;</span> + size);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 遍历LinkedList并打印元素  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;LinkedList的元素:&quot;</span>);  </span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;  </span><br><span class="line">            System.out.println(name);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 获取并移除LinkedList的第一个元素  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">firstElement</span> <span class="operator">=</span> names.pollFirst();  </span><br><span class="line">        System.out.println(<span class="string">&quot;第一个元素被移除: &quot;</span> + firstElement);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 获取并移除LinkedList的最后一个元素  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lastElement</span> <span class="operator">=</span> names.pollLast();  </span><br><span class="line">        System.out.println(<span class="string">&quot;最后一个元素被移除: &quot;</span> + lastElement);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 检查LinkedList中是否包含某个元素  </span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">contains</span> <span class="operator">=</span> names.contains(<span class="string">&quot;Bob&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;LinkedList是否包含元素 Bob: &quot;</span> + contains);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 获取LinkedList的第一个和最后一个元素  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">first</span> <span class="operator">=</span> names.getFirst();  </span><br><span class="line">        <span class="type">String</span> <span class="variable">last</span> <span class="operator">=</span> names.getLast();  </span><br><span class="line">        System.out.println(<span class="string">&quot;LinkedList的第一个元素: &quot;</span> + first);  </span><br><span class="line">        System.out.println(<span class="string">&quot;LinkedList的最后一个元素: &quot;</span> + last);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 清空LinkedList  </span></span><br><span class="line">        names.clear();  </span><br><span class="line">        System.out.println(<span class="string">&quot;清空LinkedList后的大小: &quot;</span> + names.size());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#top">返回目录</a></p><h4 id="3-Stack："><a href="#3-Stack：" class="headerlink" title="3.Stack："></a>3.Stack：</h4><p>Stack是一种后进先出（LIFO）的数据结构，Java提供了Stack类。Stack适用于回溯算法、表达式求值等场景。</p><blockquote><p>Stack 的简单演示使用：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackExample</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// 创建一个Stack实例，用于存储字符串  </span></span><br><span class="line">        Stack&lt;String&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 将元素压入栈  </span></span><br><span class="line">        stack.push(<span class="string">&quot;Alice&quot;</span>);  </span><br><span class="line">        stack.push(<span class="string">&quot;Bob&quot;</span>);  </span><br><span class="line">        stack.push(<span class="string">&quot;Charlie&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 获取栈的大小  </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> stack.size();  </span><br><span class="line">        System.out.println(<span class="string">&quot;栈的大小: &quot;</span> + size);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 查看栈顶元素  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">topElement</span> <span class="operator">=</span> stack.peek();  </span><br><span class="line">        System.out.println(<span class="string">&quot;栈顶元素: &quot;</span> + topElement);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 遍历栈并打印元素  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;栈的元素 (自顶向下):&quot;</span>);  </span><br><span class="line">        <span class="keyword">for</span> (String element : stack) &#123;  </span><br><span class="line">            System.out.println(element);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 弹出栈顶元素  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">poppedElement</span> <span class="operator">=</span> stack.pop();  </span><br><span class="line">        System.out.println(<span class="string">&quot;弹出的栈顶元素: &quot;</span> + poppedElement);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 再次查看栈顶元素  </span></span><br><span class="line">        topElement = stack.peek();  </span><br><span class="line">        System.out.println(<span class="string">&quot;执行pop操作后的栈顶元素: &quot;</span> + topElement);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 检查栈是否为空  </span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">empty</span> <span class="operator">=</span> stack.isEmpty();  </span><br><span class="line">        System.out.println(<span class="string">&quot;栈是否为空: &quot;</span> + empty);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 清空栈  </span></span><br><span class="line">        stack.clear();  </span><br><span class="line">        System.out.println(<span class="string">&quot;清空栈后的大小: &quot;</span> + stack.size());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#top">返回目录</a></p><ul><li><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3></li></ul><h4 id="1-HashSet："><a href="#1-HashSet：" class="headerlink" title="1.HashSet："></a>1.HashSet：</h4><p>HashSet是一种基于哈希表实现的无序集合，它不能包含重复元素，并且不保证元素的顺序。HashSet提供了快速的查找和插入操作，适用于需要高效查找和去重的场景。</p><blockquote><p>HashSet 的简单演示使用：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetExample</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// 创建HashSet  </span></span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 添加元素  </span></span><br><span class="line">        set.add(<span class="string">&quot;元素1&quot;</span>);  </span><br><span class="line">        set.add(<span class="string">&quot;元素2&quot;</span>);  </span><br><span class="line">        set.add(<span class="string">&quot;元素3&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 检查HashSet中是否包含某个元素  </span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">containsElement</span> <span class="operator">=</span> set.contains(<span class="string">&quot;元素1&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;HashSet中是否包含元素1？&quot;</span> + containsElement);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 遍历HashSet中的元素  </span></span><br><span class="line">        <span class="keyword">for</span> (String element : set) &#123;  </span><br><span class="line">            System.out.println(element);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 删除HashSet中的元素  </span></span><br><span class="line">        set.remove(<span class="string">&quot;元素2&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#top">返回目录</a></p><h4 id="2-TreeSet："><a href="#2-TreeSet：" class="headerlink" title="2.TreeSet："></a>2.TreeSet：</h4><p>TreeSet是一种基于红黑树实现的有序集合，它按照元素的自然顺序或自定义比较器进行排序。TreeSet提供了高效的插入、删除和查找操作，并保持元素的有序性。</p><blockquote><p>TreeSet 的简单演示使用：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.TreeSet;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSetExample</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// 创建TreeSet  </span></span><br><span class="line">        TreeSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 添加元素  </span></span><br><span class="line">        set.add(<span class="string">&quot;元素1&quot;</span>);  </span><br><span class="line">        set.add(<span class="string">&quot;元素2&quot;</span>);  </span><br><span class="line">        set.add(<span class="string">&quot;元素3&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 检查TreeSet中是否包含某个元素  </span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">containsElement</span> <span class="operator">=</span> set.contains(<span class="string">&quot;元素1&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;TreeSet中是否包含元素1？&quot;</span> + containsElement);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 遍历TreeSet中的元素  </span></span><br><span class="line">        <span class="keyword">for</span> (String element : set) &#123;  </span><br><span class="line">            System.out.println(element);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 删除TreeSet中的元素  </span></span><br><span class="line">        set.remove(<span class="string">&quot;元素2&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#top">返回目录</a></p><ul><li><h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4></li></ul><h4 id="Queue："><a href="#Queue：" class="headerlink" title="Queue："></a>Queue：</h4><p>Queue是一种先进先出（FIFO）的数据结构，Java提供了Queue接口和其实现类，如LinkedList和PriorityQueue。队列适用于任务调度和异步处理等场景。</p><blockquote><p>Queue 的简单演示使用：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;  </span><br><span class="line"><span class="keyword">import</span> java.util.Queue;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueueExample</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// 创建一个队列  </span></span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 向队列中添加元素  </span></span><br><span class="line">        queue.offer(<span class="string">&quot;元素1&quot;</span>);  </span><br><span class="line">        queue.offer(<span class="string">&quot;元素2&quot;</span>);  </span><br><span class="line">        queue.offer(<span class="string">&quot;元素3&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 获取队头元素并输出  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">head</span> <span class="operator">=</span> queue.peek();  </span><br><span class="line">        System.out.println(<span class="string">&quot;队头元素为：&quot;</span> + head);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 遍历队列中的元素  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;队列中的元素：&quot;</span>);  </span><br><span class="line">        <span class="keyword">for</span> (String element : queue) &#123;  </span><br><span class="line">            System.out.println(element);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 删除队头元素  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">removedElement</span> <span class="operator">=</span> queue.poll();  </span><br><span class="line">        System.out.println(<span class="string">&quot;被删除的队头元素为：&quot;</span> + removedElement);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 再次遍历队列中的元素  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;删除队头元素后的队列中的元素：&quot;</span>);  </span><br><span class="line">        <span class="keyword">for</span> (String element : queue) &#123;  </span><br><span class="line">            System.out.println(element);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#top">返回目录</a></p><h3 id="2、Map"><a href="#2、Map" class="headerlink" title="2、Map"></a>2、Map</h3><h4 id="1-HashMap："><a href="#1-HashMap：" class="headerlink" title="1.HashMap："></a>1.HashMap：</h4><p>HashMap是一种基于哈希表实现的键值对映射，它提供了快速的插入、删除和查找操作。HashMap允许key和value为空，但不保证元素的顺序。</p><blockquote><p>HashMap 的简单演示使用：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapExample</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// 创建一个HashMap  </span></span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 添加键值对到HashMap中  </span></span><br><span class="line">        map.put(<span class="string">&quot;键1&quot;</span>, <span class="number">1</span>);  </span><br><span class="line">        map.put(<span class="string">&quot;键2&quot;</span>, <span class="number">2</span>);  </span><br><span class="line">        map.put(<span class="string">&quot;键3&quot;</span>, <span class="number">3</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 获取指定键对应的值并输出  </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">value1</span> <span class="operator">=</span> map.get(<span class="string">&quot;键1&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;键1对应的值为：&quot;</span> + value1);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 遍历HashMap中的键值对  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;HashMap中的键值对：&quot;</span>);  </span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();  </span><br><span class="line">            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();  </span><br><span class="line">            System.out.println(key + <span class="string">&quot; -&gt; &quot;</span> + value);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 删除指定键的键值对  </span></span><br><span class="line">        map.remove(<span class="string">&quot;键2&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 再次遍历HashMap中的键值对  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;删除键2后的HashMap中的键值对：&quot;</span>);  </span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();  </span><br><span class="line">            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();  </span><br><span class="line">            System.out.println(key + <span class="string">&quot; -&gt; &quot;</span> + value);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#top">返回目录</a></p><h4 id="2-TreeMap："><a href="#2-TreeMap：" class="headerlink" title="2.TreeMap："></a>2.TreeMap：</h4><p>TreeMap是一种基于红黑树实现的有序键值对映射，它按照键的自然顺序或自定义比较器进行排序。TreeMap提供了高效的插入、删除和查找操作，并保持键的有序性。</p><blockquote><p>TreeMap 的简单演示使用：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeMapExample</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// 创建一个TreeMap  </span></span><br><span class="line">        TreeMap&lt;String, Integer&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 向TreeMap中添加键值对  </span></span><br><span class="line">        treeMap.put(<span class="string">&quot;键1&quot;</span>, <span class="number">1</span>);  </span><br><span class="line">        treeMap.put(<span class="string">&quot;键3&quot;</span>, <span class="number">3</span>);  </span><br><span class="line">        treeMap.put(<span class="string">&quot;键2&quot;</span>, <span class="number">2</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 获取指定键对应的值并输出  </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">value1</span> <span class="operator">=</span> treeMap.get(<span class="string">&quot;键1&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;键1对应的值为：&quot;</span> + value1);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 遍历TreeMap中的键值对  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;TreeMap中的键值对：&quot;</span>);  </span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : treeMap.entrySet()) &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();  </span><br><span class="line">            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();  </span><br><span class="line">            System.out.println(key + <span class="string">&quot; -&gt; &quot;</span> + value);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 删除指定键的键值对  </span></span><br><span class="line">        treeMap.remove(<span class="string">&quot;键2&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 再次遍历TreeMap中的键值对  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;删除键2后的TreeMap中的键值对：&quot;</span>);  </span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : treeMap.entrySet()) &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();  </span><br><span class="line">            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();  </span><br><span class="line">            System.out.println(key + <span class="string">&quot; -&gt; &quot;</span> + value);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 获取TreeMap中的第一个键和最后一个键  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">firstKey</span> <span class="operator">=</span> treeMap.firstKey();  </span><br><span class="line">        <span class="type">String</span> <span class="variable">lastKey</span> <span class="operator">=</span> treeMap.lastKey();  </span><br><span class="line">  </span><br><span class="line">        System.out.println(<span class="string">&quot;TreeMap中的第一个键：&quot;</span> + firstKey);  </span><br><span class="line">        System.out.println(<span class="string">&quot;TreeMap中的最后一个键：&quot;</span> + lastKey);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h3><blockquote><p>如果想进一步深入探索Java容器请参阅<a href="https://www.w3cschool.cn/java/dict">Java官方文档</a>)</p></blockquote><p><a href="#top">返回顶部</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql基础语法总结</title>
      <link href="/2023/09/12/MySQL-MySql%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2023/09/12/MySQL-MySql%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="MySql基础语法总结"><a href="#MySql基础语法总结" class="headerlink" title="MySql基础语法总结"></a>MySql基础语法总结</h2><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h3 id="1、数据库"><a href="#1、数据库" class="headerlink" title="1、数据库"></a>1、数据库</h3><h4 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h4><blockquote><p>语法：CREATE DATABASE + 数据库名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE database_name;</span><br></pre></td></tr></table></figure><h4 id="2-删除数据库"><a href="#2-删除数据库" class="headerlink" title="2.删除数据库"></a>2.删除数据库</h4><blockquote><p>语法：DROP DATABASE + 数据库名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE database_name;</span><br></pre></td></tr></table></figure><h4 id="3-选择数据库"><a href="#3-选择数据库" class="headerlink" title="3.选择数据库"></a>3.选择数据库</h4><blockquote><p>语法：USE + 数据库名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE database_name;</span><br></pre></td></tr></table></figure><h3 id="2、表"><a href="#2、表" class="headerlink" title="2、表"></a>2、表</h3><h4 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1.创建表"></a>1.创建表</h4><blockquote><p>语法：CREATE TABLE + 表名{</p><p>列名 + 数据类型</p><p>······</p><p>}</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name (</span><br><span class="line">    column1 datatype,</span><br><span class="line">    column2 datatype,</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="2-删除表"><a href="#2-删除表" class="headerlink" title="2.删除表"></a>2.删除表</h4><blockquote><p>语法：DROP TABLE + 表名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE table_name;</span><br></pre></td></tr></table></figure><h3 id="3、数据"><a href="#3、数据" class="headerlink" title="3、数据"></a>3、数据</h3><h4 id="1-添加数据"><a href="#1-添加数据" class="headerlink" title="1.添加数据"></a>1.添加数据</h4><blockquote><p>语法：INSERT INTO + 表名（列名，列名，·····）VALUES （对应列的值，对应列的值，·····）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name (column1, column2, ...)</span><br><span class="line">VALUES (value1, value2, ...);</span><br></pre></td></tr></table></figure><h4 id="2-更新数据"><a href="#2-更新数据" class="headerlink" title="2.更新数据"></a>2.更新数据</h4><blockquote><p>语法： UPDATE + 表名 + SET + 列名&#x3D;数值······（给对应列赋值）</p><p>WHERE 语句是条件语句（类似于if语句，用于过滤数据）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name</span><br><span class="line">SET column1 = value1, column2 = value2, ...</span><br><span class="line">WHERE condition;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;拓展1&#x3D;&#x3D;：<span id="p1"></span><br>加WHERE语句使表内数据更改的范围减小，如WHERE id&#x3D;1,此时<br>系统只对id&#x3D;1的那一行数据进行相应更改。<br>不加WHERE则系统针对的是整个表的数据；<br><a href="#p2">拓展2</a>有相应解释</p><h4 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3.删除数据"></a>3.删除数据</h4><blockquote><p>语法：DELETE FROM + 表名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name</span><br><span class="line">WHERE condition;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;拓展2&#x3D;&#x3D;：<span id="p2"></span><br>如<a href="#p1">拓展1</a>所言，在删除数据时，如果不加WHERE语句；此时，删除的是整个表的内容。<br>而加上WHERE id&#x3D;1 时只会删除表中id&#x3D;1的那一行。<br>另外，DELETE FROM table_name语句<br>要与DROP TABLE table_name 语句区分开来，前者只是删除表的内容并不破坏表的结构（表依然存在），<br>而后者则是直接删除表，破坏了表的结构（表不存在了）。</p><h4 id="4-查询数据"><a href="#4-查询数据" class="headerlink" title="4.查询数据"></a>4.查询数据</h4><blockquote><p>语法：SELECT + 列名，·····</p><p>FROM table_name；（可加可不加WHERE，WHERE语句的作用是过滤数据，更精确查找）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition;</span><br></pre></td></tr></table></figure><h4 id="5-按条件排序"><a href="#5-按条件排序" class="headerlink" title="5.按条件排序"></a>5.按条件排序</h4><blockquote><p>语法：ORDER BY + 列名（如ORDER BY id，则是表示按id排序）</p><p>默认情况下为升序排序</p><p>若想降序排序则在语句后面要加上DESC，如ORDER BY column_name DESC</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition</span><br><span class="line">ORDER BY column_name;</span><br></pre></td></tr></table></figure><h2 id="函数篇"><a href="#函数篇" class="headerlink" title="函数篇"></a>函数篇</h2><h3 id="1、字符串函数"><a href="#1、字符串函数" class="headerlink" title="1、字符串函数"></a>1、字符串函数</h3><blockquote><ul><li><code>CONCAT</code>(S<del>1</del>,S<del>2</del>,···,S<del>n</del>)：字符串拼接，将S<del>1</del>,S<del>2</del>,···,S<del>n</del>拼接成一个字符串</li><li><code>LOWER</code>(str)：将字符串str全部转换为小写 </li><li><code>UPPER</code>(str)：将字符串str全部转换为大写</li><li><code>LPAD</code>(str,n,pad)：左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</li><li><code>RPAD</code>(str,n,pad)：右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</li><li><code>TRIM</code>(str)：去掉字符串头部和尾部的空格</li><li><code>SUBSTRING</code>(str,start,len)：返回从字符串str从start位置起的len个长度的字符串</li></ul></blockquote><h3 id="2、数值函数"><a href="#2、数值函数" class="headerlink" title="2、数值函数"></a>2、数值函数</h3><blockquote><ul><li><code>CEIL</code>(x)：向上取整</li><li><code>FLOOR</code>(x)：向下取整</li><li><code>MOD</code>(x,y)：返回x&#x2F;y的模</li><li><code>RAND</code>()：返回0~1内的随机数</li><li><code>ROUND</code>(x,y)：求参数x的四舍五入的值，保留y位小数</li></ul></blockquote><h3 id="3、日期函数"><a href="#3、日期函数" class="headerlink" title="3、日期函数"></a>3、日期函数</h3><blockquote><ul><li><code>CURDATE</code>()：返回当前日期</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select CURDATE();</span><br></pre></td></tr></table></figure><ul><li><code>CURTIME</code>()：返回当前时间</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select CURTIME();</span><br></pre></td></tr></table></figure><ul><li><code>NOW</code>()：返回当前日期和时间</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select NOW();</span><br></pre></td></tr></table></figure><ul><li><code>YEAR</code>(date)：获取指定date的年份</li></ul><p>示例：返回当前年份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select YEAR(now());</span><br></pre></td></tr></table></figure><ul><li><code>MONTH</code>(date)：获取指定date的月份</li></ul><p>示例：返回当前月份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select MONTH(now());</span><br></pre></td></tr></table></figure><ul><li><code>DAY</code>(date)：获取指定date的日期</li></ul><p>示例：返回当前日期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select DAY(now());</span><br></pre></td></tr></table></figure><ul><li>DATE_ADD(date,INTERVAL expr type)：返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</li></ul><p>示例：返回目前时间加上70天后的时间值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select date_add(now(),INTERVAL 70 day );</span><br></pre></td></tr></table></figure><ul><li><code>DATEDIFF</code>(date1,date2)：返回起始时间date1与结束时间date2之间的天数，用起始时间减去结束时间</li></ul><p>示例：返回2023-9-8与2021-11-1之间的天数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select datediff(&#x27;2023-9-8&#x27;,&#x27;2021-11-1&#x27;);</span><br></pre></td></tr></table></figure></blockquote><h3 id="4、流程函数"><a href="#4、流程函数" class="headerlink" title="4、流程函数"></a>4、流程函数</h3><blockquote><ul><li><code>IF</code>(value,t,f)：如果value为true，则返回t，否则返回f</li></ul><p>示例：返回OK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select IF(true,&#x27;Ok&#x27;,&#x27;NO&#x27;);</span><br></pre></td></tr></table></figure><ul><li><code>IFNULL</code>(value1,value2)：如果value1不为空，返回value1，否则返回value2</li></ul><p>示例：返回value2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ifnull(null,&#x27;value2&#x27;);</span><br></pre></td></tr></table></figure><ul><li><code>CASE</code> <code>WHEN</code> [val] <code>THEN</code> [res1] … <code>ELSE</code> [default] <code>END</code>：如果val为true，返回res1，…否则返回default默认值</li></ul><p>示例：如果id&gt;1，则返回老大，否则返回小弟</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">    name,</span><br><span class="line">    (case  when id&gt;1 then &#x27;老大&#x27; else &#x27;小弟&#x27; end) as impt</span><br><span class="line">from user01;</span><br></pre></td></tr></table></figure><ul><li><code>CASE</code> [expr] <code>WHEN</code> [val] <code>THEN</code> [res1] … <code>ELSE</code> [default] <code>END</code>：如果expr(字段)的值等于val1，返回res1，…否则返回default默认值</li></ul><p>示例：如果id等于1，则返回老大，等于2返回老二，其他情况返回小弟</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">   name,</span><br><span class="line">   (case  id  when 1  then &#x27;老大&#x27; when 2 then &#x27;老二&#x27; else &#x27;小弟&#x27; end) AS impt</span><br><span class="line">from user01;</span><br></pre></td></tr></table></figure></blockquote><h2 id="查询篇"><a href="#查询篇" class="headerlink" title="查询篇"></a>查询篇</h2><h3 id="1、连接查询"><a href="#1、连接查询" class="headerlink" title="1、连接查询"></a>1、连接查询</h3><h4 id="1-内连接"><a href="#1-内连接" class="headerlink" title="1.内连接"></a>1.内连接</h4><ul><li>隐式内连接</li></ul><blockquote><p><code>SELECT</code>  + 字段列表 + <code>FROM</code> + 表1，表2 +  <code>WHERE</code> + 条件 </p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user,sore where user.id=sore.id;</span><br></pre></td></tr></table></figure></blockquote><ul><li>显示内连接</li></ul><blockquote><p><code>SELECT</code> + 字段列表 + <code>FROM</code> + 表1 + [<code>INNER</code>] + <code>JOIN</code> + 表2 + <code>ON</code> + 连接条件（<code>INNER</code>可不写）</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user join sore on user.id = sore.id;</span><br></pre></td></tr></table></figure></blockquote><h4 id="2-外连接"><a href="#2-外连接" class="headerlink" title="2.外连接"></a>2.外连接</h4><ul><li>左外连接</li></ul><blockquote><p><code>SELECT</code> + 字段列表 + <code>FROM</code> + 表1 + <code>LEFT</code> + [<code>OUTER</code>]  + <code>JOIN</code> + 表2 + <code>ON</code> + 条件（<code>OUTER</code>可不写）</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user left join sore on user.id = sore.id;</span><br></pre></td></tr></table></figure><p>补充：查询的数据包含表1（左表）的所有数据</p></blockquote><ul><li>右外连接</li></ul><blockquote><p><code>SELECT</code> + 字段列表 + <code>FROM</code> + 表1 + <code>RIGHT</code> + [<code>OUTER</code>]  + <code>JOIN</code> + 表2 + <code>ON</code> + 条件（<code>OUTER</code>可不写）</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user left join sore on user.id = sore.id;</span><br></pre></td></tr></table></figure><p>补充：查询的数据包含表2（右表）的所有数据</p></blockquote><h4 id="3-自连接"><a href="#3-自连接" class="headerlink" title="3.自连接"></a>3.自连接</h4><blockquote><p><code>SELECT</code> + 字段列表 + <code>FROM</code> + 表A + 别名 + <code>JOIN</code> + 表B + 别名B + <code>ON</code> + 条件</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user as u left join sore as s on u.id = s.id;</span><br></pre></td></tr></table></figure><p>补充：自连接查询，可以是内连接查询，也可以是外连接查询。别名可以用<code>AS</code>来命名，或者直接空格+别名</p></blockquote><h3 id="2、联合查询"><a href="#2、联合查询" class="headerlink" title="2、联合查询"></a>2、联合查询</h3><blockquote><p><code>SELECT</code> + 字段列表 + <code>FROM</code> + 表A<br><code>UNION</code> + [<code>ALL</code>]<br><code>SELECT</code> + 字段列表 + <code>FROM</code> + 表B</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select user.id from user</span><br><span class="line">union</span><br><span class="line">select sore.id from sore;</span><br></pre></td></tr></table></figure><p>补充：对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。<br><code>union all</code> 会将全部的数据合并在一起，<code>union</code>会对合并之后的数据去重</p></blockquote><h3 id="3、子查询"><a href="#3、子查询" class="headerlink" title="3、子查询"></a>3、子查询</h3><blockquote><p><code>SELECT</code> + 字段列表 + <code>FROM</code> + 表A + <code>WHERE</code> + 字段列表 &#x3D; {<code>SELECT</code> + 字段列表 + <code>FROM</code> + 表B}</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from user01 </span><br><span class="line">where id =(select id from user where id=1);</span><br></pre></td></tr></table></figure><p>补充：子查询外部的语句可以是<code>INSERT</code>&#x2F;<code>DELETE</code>&#x2F;<code>SELECT</code>的任何一个</p></blockquote><h2 id="拓展篇"><a href="#拓展篇" class="headerlink" title="拓展篇"></a>拓展篇</h2><h3 id="1、外键"><a href="#1、外键" class="headerlink" title="1、外键"></a>1、外键</h3><ul><li>添加外键</li></ul><blockquote><p><code>ALTER</code> + <code>TABLE</code> + 表名 + <code>ADD</code> + <code>CONSTRAINT</code> + 外键名称 + <code>FOREIGN</code> + <code>KEY</code> + (外键字段名) + <code>REFERENCES</code> + 主表 + (主表列名)</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user add constraint fk_user_p_id foreign key (p_id) references sore(id);</span><br></pre></td></tr></table></figure></blockquote><ul><li>删除外键</li></ul><blockquote><p><code>ALTER</code> + <code>TABLE</code> + 表名 + <code>DROP</code> + <code>FOREIGN</code> + <code>KEY</code> + 外键名称</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user drop foreign key fk_user_sore;</span><br></pre></td></tr></table></figure></blockquote><h3 id="2、事务"><a href="#2、事务" class="headerlink" title="2、事务"></a>2、事务</h3><ul><li>开启事务</li></ul><blockquote><p><code>START</code> + <code>TRANSACTION</code> 或 <code>BEGIN</code></p></blockquote><ul><li>提交事务</li></ul><blockquote><p><code>COMMIT</code></p></blockquote><ul><li>回滚事务</li></ul><blockquote><p><code>ROLLBACK</code></p></blockquote><ul><li>查看&#x2F;设置事务提交方式(手动提交)</li></ul><blockquote><p><code>SELECT + @@autocommit / SET + @@autocommit=0</code></p></blockquote><ul><li>查看事务隔离级别</li></ul><blockquote><p><code>SELECT + @@TRANSACTION_ISOLATION</code></p></blockquote><ul><li>设置事务隔离级别</li></ul><blockquote><p><code>SET + [SESSION | GLOBAL] + TRANSACTION + ISOLATION + LEVEL + &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;</code></p></blockquote><hr><blockquote><p>说明：本文仅为学习笔记分享，知识点较基础，若想更深入了解<strong>MySQL</strong>可以访问<a href="https://dev.mysql.com/doc/">MySQL官方网址</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机系统概述</title>
      <link href="/2023/09/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/09/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机系统概述"><a href="#计算机系统概述" class="headerlink" title="计算机系统概述"></a>计算机系统概述</h1><h2 id="1、计算机分类"><a href="#1、计算机分类" class="headerlink" title="1、计算机分类"></a>1、计算机分类</h2><ul><li><strong>电子模拟计算机</strong><ul><li>特点：数值由连续量来表示，运算过程也是连续的</li></ul></li><li><strong>电子数字计算机</strong><ul><li>特点：按位运算，并且不连续地跳动计算</li></ul></li></ul><p>通用计算机分为：<strong>超级计算机、大型机、服务器、PC机、单片机、多核机</strong></p><h2 id="2、计算机的发展简史"><a href="#2、计算机的发展简史" class="headerlink" title="2、计算机的发展简史"></a>2、计算机的发展简史</h2><p>世界上第一台电子数字计算机是<strong>1946</strong>年在<strong>美国宾夕法尼亚大学</strong>诞生</p><h3 id="2-1、计算机的五代变化"><a href="#2-1、计算机的五代变化" class="headerlink" title="2.1、计算机的五代变化"></a>2.1、计算机的五代变化</h3><ul><li>第一代：<ul><li>时间：1946~1957年</li><li>类型：电子管计算机</li><li>影响：数据处理机开始得到应用</li></ul></li><li>第二代<ul><li>时间：1958~1964年</li><li>类型：晶体管计算机</li><li>影响：工业控制机开始得到应用</li></ul></li><li>第三代：<ul><li>时间：1965~1971年</li><li>类型：中小规模集成电路计算机</li><li>小型计算机开始出现</li></ul></li><li>第四代：<ul><li>时间：1972~1990年</li><li>类型：大规模和超大规模集成电路计算机</li><li>影响：微型计算机开始出现</li></ul></li><li>第五代：<ul><li>时间：1991年到现在</li><li>类型：巨大规模集成电路计算机</li><li>影响：单片机开始出现</li></ul></li></ul><p><strong>摩尔定律</strong>：集成电路的性能每隔一段时间会提升一倍，而成本会减半。</p><p><strong>中国成就</strong>：在国际超级计算机500强排序中，2004年“<strong>曙光4000A</strong>”位居第10；2009年“<strong>星云号</strong>”排名第2；</p><p>​                    2010年“<strong>天河一号</strong>”位居第1。</p><h3 id="2-2、半导体存储器的发展"><a href="#2-2、半导体存储器的发展" class="headerlink" title="2.2、半导体存储器的发展"></a>2.2、半导体存储器的发展</h3><ul><li>磁芯存储器<ul><li>时间：20世纪50~60年代</li><li>特点：价格昂贵，体积大，读出是破坏性的</li></ul></li><li>半导体存储器<ul><li>1970出现</li><li>特点：读出是非破坏性的，读写快</li></ul></li></ul><h3 id="2-3、微处理器的发展"><a href="#2-3、微处理器的发展" class="headerlink" title="2.3、微处理器的发展"></a>2.3、微处理器的发展</h3><ul><li>1971年Intel公司开发出Intel 4004——4位微处理器（微处理器的诞生）</li><li>1972年Intel 8008——8位微处理器</li><li>1974年Intel 8080——8位微处理器（第一个通用微处理器）</li><li>20世纪70年代末年Intel 8086——16位微处理器</li><li>1985年Intel 80386——12位微处理器</li></ul><h3 id="2-4、计算机的性能指标"><a href="#2-4、计算机的性能指标" class="headerlink" title="2.4、计算机的性能指标"></a>2.4、计算机的性能指标</h3><ol><li><p><strong>吞吐量</strong>：表征一台计算机在某一时间间隔内能够处理的信息量。</p></li><li><p><strong>响应时间</strong>：表征从输入有效到系统产生响应之间的时间度量，用时间单位来度量。</p></li><li><p><strong>利用率</strong>：在给定的时间间隔内系统被实际使用的时间所占的比率，用百分比表示。</p></li><li><p><strong>处理机字长</strong>：指处理机运算器中一次能够完成二进制数运算的位数，如32位、64位。</p></li><li><p><strong>总线宽度</strong>：一般指CPU中运算器和存储器之间进行互连的内部总线二进制位数。</p></li><li><p><strong>存储器容量</strong>：存储器中所有存储单元的总数目，通常用KB、MB、GB、TB来表示。</p></li><li><p><strong>存储器带宽</strong>：单位时间内从存储器读出的二进制数信息，一般用字节。</p></li><li><p><strong>主频&#x2F;时钟周期：</strong>CPU的工作节拍受主时钟控制，主时钟不断产生固定频率的时钟，主时钟的频率(f)叫CPU的主频率。</p><p>度量单位是MHz(兆赫兹)、GHz(集赫兹)。主频的倒数称为CPU时钟周期(T)，T&#x3D;1&#x2F;f，度量单位是µs，ns。</p></li><li><p><strong>CPU执行时间</strong>：表示CPU执行一般程序所占用的CPU时间，可用下式计算：</p></li></ol><blockquote><p>​                               CPU 执行时间&#x3D;CPU时钟周期数×CPU周期</p></blockquote><ol start="10"><li><p><strong>CPI</strong>：表示每条指令周期数，即执行一条指令所需所需要的平均时钟周期数。用下式计算：</p><blockquote><p>​                               CPI&#x3D;执行执行某段程序所需的CPU时钟周期数÷程序包含的指令条数</p></blockquote></li><li><p><strong>MIPS</strong>（Million Instructions Per Second）：表示平均每秒执行多少百万条定点指令数，用下式计算：</p><blockquote><p>​                                                               MIPS&#x3D;指令数÷（程序执行时间×10^6^）</p></blockquote></li><li><p><strong>FLOPS</strong>（Floating-point Operations Per Second）：表示每秒执行浮点操作的次数，用来衡量机器浮点操作的性能。用下式计算：</p><blockquote><p>​                                                                   FLOPS&#x3D;程序中的浮点操作次数÷程序执行时间(s)</p></blockquote></li></ol><h2 id="3、计算机的硬件"><a href="#3、计算机的硬件" class="headerlink" title="3、计算机的硬件"></a>3、计算机的硬件</h2><ul><li><p><strong>运算器</strong></p><ul><li><p>计算机的运算器是计算机的核心部件之一，负责进行各种数值运算和逻辑运算。它由算术逻辑单元（ALU）和寄存器组成。</p><ol><li>算术逻辑单元(ALU)：ALU是运算器的关键组件，它可以进行各种算术和逻辑操作。算术操作包括加法、减法、乘法和除法等，逻辑操作包括与、或、非、异或等。ALU能够通过控制信号选择不同的操作，从而实现各种运算功能。</li><li>寄存器：寄存器是运算器中用来存储数据的临时存储器件。计算机的运算器通常包含多个寄存器，如累加器、操作数寄存器、状态寄存器等。寄存器的容量通常较小，但速度很快，能够快速读写数据。</li></ol><p>运算器是计算机的核心组成部分，它通过执行指令和操作数的运算，实现各种复杂的计算和逻辑处理。除了处理器中的运算器之外，现代计算机还有专门的图形处理器、数字信号处理器等特殊用途的运算器。</p></li></ul></li><li><p><strong>存储器</strong></p><ul><li>主存储器（内存）：主存储器是计算机中用于临时存储数据和指令的地方，它是CPU能直接访问的存储设备。主存储器通常使用芯片技术实现，具有高速度和易失性的特点，当计算机断电时，存储在主存储器中的数据会丢失。主存储器通常以字节（byte）为单位进行存储和访问，常见的主存储器类型包括随机存取存储器（RAM）和只读存储器（ROM）。</li></ul><ul><li>随机存取存储器（RAM）：RAM是一种易于读取和写入的主存储器，它能够快速访问和修改数据。RAM分为静态随机存取存储器（SRAM）和动态随机存取存储器（DRAM），SRAM速度更快但价格更高，DRAM则价格相对较低但速度较慢。</li><li>只读存储器（ROM）：ROM是一种只能读取而不能修改的主存储器，其中存储了永久性的指令和数据。ROM通常用于存储计算机的基本输入输出系统（BIOS）和其他固化的程序或数据。</li></ul><ul><li>辅助存储器（外部存储器）：辅助存储器是计算机中用于长期存储大量数据和程序的设备，它具有较大的容量和非易失性的特点。辅助存储器通常以扇区（sector）为单位进行存储和访问，常见的辅助存储器设备包括硬盘驱动器、光盘驱动器、固态硬盘等。<ul><li>光盘驱动器：光盘驱动器使用光学介质（如CD、DVD）作为存储介质，具有较大的存储容量，但数据读取速度相对较慢。</li><li>固态硬盘：固态硬盘使用闪存芯片作为存储介质，具有较快的数据读写速度和较低的能耗，但价格相对较高。</li></ul></li></ul></li><li><p><strong>控制器</strong></p><ul><li><p>控制器是计算机系统的核心部件之一，它负责管理和控制整个计算机系统的各个组件和操作。</p></li><li><p>控制器主要包括以下几个方面的功能：</p><ol><li>指令解析和执行：控制器负责解析计算机内存中存储的指令，将其转化为实际的操作，包括算术逻辑运算、存储数据、传输数据等。</li><li>时序控制：控制器通过时钟信号控制各个组件的工作步骤和工作时间，确保计算机系统的各个部件按照正确的顺序和时机进行工作。</li><li>数据传输和处理：控制器负责管理数据的传输和处理，包括从输入设备读取数据、传送数据到内存、从内存读取数据到处理器等。</li><li>中断处理：控制器能够监测和响应外部设备的中断信号，在计算机进行其他任务时，及时中断当前任务，处理外部设备的请求。</li><li>状态监测和控制：控制器监测计算机系统的状态和各个部件的工作状态，根据需要进行相应的控制和调整。</li></ol><p>控制器通常由硬件和软件两部分组成。硬件方面，它包括电路和芯片，用于实现控制功能。而软件方面，控制器依靠操作系统和指令集架构等软件来实现上述功能。<br>总的来说，计算机的控制器起到协调各个组件工作、控制计算机操作的作用，是计算机系统中不可或缺的关键部件。</p><blockquote><p>补充：在计算机系统中，运算器和控制器通常被组合在一个集成电路芯片中，合称为<strong>中央处理器</strong>（中央处理机），简称<strong>处理器</strong>，英文缩写为<strong>CPU</strong></p></blockquote></li></ul></li><li><p><strong>适配器</strong></p><ul><li><p>计算机的适配器是用于连接和转换不同设备之间的接口的设备。它主要用于在计算机系统中连接和兼容各种外部设备，以实现数据传输和通信。</p><p>适配器通常包括以下几个部分：</p><ol><li>插头&#x2F;接口：适配器的插头或接口是连接计算机和外部设备之间的物理接口。它可以是USB、HDMI、VGA、Ethernet等各种标准接口，也可以是特定设备所需的专用接口。</li><li>转换电路：适配器的转换电路用于将计算机的信号转换为外部设备所需的信号格式。例如，将模拟信号转换为数字信号，将HDMI信号转换为VGA信号等。这些电路通过改变信号的电压、频率、格式等参数，使得不兼容的设备能够进行数据传输和通信。</li><li>驱动程序：适配器在计算机系统中通常需要安装相应的驱动程序，以使计算机能够识别和与适配器进行通信。驱动程序负责管理和控制适配器的功能，确保计算机与外部设备之间的正常通信。</li></ol><p>适配器可以用于连接各种外部设备，如打印机、摄像头、显示器、网络设备等。它们提供了计算机系统与外部设备之间的互联互通，使得不同设备可以共享数据和资源，扩展计算机的功能和应用范围。</p></li></ul></li><li><p><strong>输入输出设备</strong></p><ul><li><p>计算机的输入设备是用于将信息输入到计算机中的工具或设备，包括以下几种常见的输入设备：</p><ol><li>键盘：通过键盘输入文字、数字、符号等信息。</li><li>鼠标：通过鼠标移动、点击等操作输入指令或选择对象。</li><li>扫描仪：通过光学方式将纸质文件或图像转换为数字化的图像或文档。</li><li>触摸屏：通过触摸屏幕进行手指或电容笔的操作，可以输入指令、文字等。</li><li>麦克风：通过声音输入方式，将语音转换为数字化的音频信息。</li><li>摄像头：通过光学传感器捕捉静态或动态图像，并将其转换为数字化的图像。</li></ol><p>计算机的输出设备是将计算机处理后的信息显示或输出给用户或其他设备，主要包括以下几种常见的输出设备：</p><ol><li>显示器：通过显示屏幕将计算机处理后的图像、文字等信息以可视化的形式呈现给用户。</li><li>打印机：将计算机中的文字、图像等信息打印在纸张上。</li><li>喇叭&#x2F;耳机：通过喇叭或耳机输出计算机产生的音频信息。</li><li>投影仪：将计算机处理后的图像、视频等信息投影到大屏幕上进行展示。</li><li>数据存储设备：如硬盘、光盘、U盘等，将计算机处理后的数据存储起来，以便日后查阅或传输。</li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机系统概述 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
